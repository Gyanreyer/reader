<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OddBird</title>
  <subtitle>Scalable, accessible, and performant web applications
with a human-centered design.
</subtitle>
  <link href="https://www.oddbird.net/feed.atom" rel="self"/>
  <link href="https://www.oddbird.net/"/>
  <updated>2025-01-29T00:00:00Z</updated>
  <id>https://www.oddbird.net/</id>
  <rights>Â© 2025 OddBird</rights>
  <icon>https://www.oddbird.net/favicon.ico</icon>
  <logo>https://www.oddbird.net/assets/images/blog/oddsite-960w.jpeg</logo>
  <author>
    <name>OddBird</name>
    <email>birds@oddbird.net</email>
  </author><entry>
    <title>Here&#39;s Why Your Anchor Positioning Isn&#39;t Working</title>
    <link href="https://www.oddbird.net/2025/01/29/anchor-position-validity/"/>
    <updated>2025-01-29T00:00:00Z</updated>
    <id>https://www.oddbird.net/2025/01/29/anchor-position-validity/</id><author>
        <name>James Stuckey Weber</name>
        <uri>https://www.oddbird.net/authors/james/</uri>
      </author>
    <content type="html">&lt;img src=&quot;https://www.oddbird.net/assets/images/blog/2025/anchor-valid-1600w.jpeg&quot; alt=&quot;A weathered small boat in the fog, with ropes going into the water, hopefully leading to an anchor.
&quot;/&gt;&lt;p&gt;It is frustrating to track down why an anchor isnâ€™t being found.
Iâ€™ve found a simple way that should work in most cases.
If that doesnâ€™t work, step through the checklist,
and then dive in to get a better understanding
of how Anchor Positioning works.&lt;/p&gt;
&lt;div data-callout=&quot;note&quot;&gt;&lt;div&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; â€“ For the best chance of having anchor positioning work, hereâ€™s my
recommendation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make the anchor and the positioned element siblings.&lt;/li&gt;
&lt;li&gt;Put the anchor first in the DOM.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Go give that a try, and then come back and find out what to check next if that
didnâ€™t work.&lt;/p&gt;
&lt;p&gt;Iâ€™ll wait.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;the-problem&quot; tabindex=&quot;-1&quot;&gt;The problem&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Anchor positioning has a &lt;a href=&quot;https://www.oddbird.net/2024/11/18/anchor-position-yearbook/&quot;&gt;ton of
possibilities&lt;/a&gt;, and is fun to play around
with. But sometimes things start to break. The positioned element canâ€™t find the
anchor, it isnâ€™t positioned correctly, and Dev Tools just says &lt;code&gt;--anchor is not defined&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then you need to figure out whyâ€¦ Is it related to how youâ€™ve structured your
markup, a browser bug or partial implementation, or maybe itâ€™s how youâ€™re using
Shadow DOM?&lt;/p&gt;
&lt;p&gt;There are many reasons why it can fail, but they all fail in the same way. This
makes it really hard to troubleshoot and recover from.&lt;/p&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;troubleshooting-checklist&quot; tabindex=&quot;-1&quot;&gt;Troubleshooting checklist&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Hereâ€™s how to check for some of the common reasons why an anchor isnâ€™t found:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.oddbird.net/feed.atom#anchor-as-a-parent-to-the-positioned-element&quot;&gt;Check that your anchor is not a parent of the positioned element.&lt;/a&gt; If it is,
make sure the anchor is not generating a containing block for the anchor.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.oddbird.net/feed.atom#valid-anchor-pseudo-elements&quot;&gt;Check that the anchor is an element or valid pseudo-element.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.oddbird.net/feed.atom#anchor-scope&quot;&gt;Check that both the anchor and positioned elements are in the same &lt;code&gt;anchor-scope&lt;/code&gt;
subtree.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.oddbird.net/feed.atom#absolute-anchor-order&quot;&gt;If your anchor is absolutely positioned, make sure it comes before the positioned
element in the DOM.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.oddbird.net/feed.atom#top-layer&quot;&gt;Check that your anchor is not in a higher top layer (generated by a popover or modal dialog)
than the positioned element.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.oddbird.net/feed.atom#anchoring-across-shadow-trees&quot;&gt;Check that the &lt;code&gt;anchor-name&lt;/code&gt; is defined by styles in the same shadow or document tree
where it is referred to.&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If your issue isnâ€™t on this list, &lt;a href=&quot;https://www.oddbird.net/contact/&quot;&gt;let us know&lt;/a&gt; how you fixed it!
This list isnâ€™t exhaustive, and omits some cases with hidden content, fixed
position anchors, and other less likely edge cases.&lt;/p&gt;
&lt;p&gt;Weâ€™re also &lt;a href=&quot;https://www.oddbird.net/contact/&quot;&gt;available for office hours&lt;/a&gt; to help work through your
specific case.&lt;/p&gt;
&lt;div data-callout=&quot;note&quot;&gt;&lt;div&gt;
&lt;p&gt;The examples in this article are best viewed in a Chromium browser, version 131
or later. In the examples that show that an anchor is not found, be aware of a
&lt;a href=&quot;https://issues.chromium.org/issues/388575663&quot;&gt;bug&lt;/a&gt; in Chromium that causes
elements with a &lt;code&gt;position-area&lt;/code&gt; rule that do not have a valid anchor to be
positioned incorrectly. ðŸ¤·ðŸ¼â€â™‚ï¸&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;anchor-as-a-parent-to-the-positioned-element&quot;&gt;Anchor as a parent to the positioned element&lt;/h3&gt;
&lt;p&gt;While a positioned element can be a child of the anchor, this is the primary
place where Iâ€™ve seen anchor positioning fail.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://drafts.csswg.org/css-anchor-position/&quot;&gt;spec&lt;/a&gt; has specific
requirements regarding the relationship between the containing blocks of the
anchor and the positioned element â€“ and containing blocks are essentially
invisible, except in their effects, to developers. This leads to unexpected and
surprising behavior.&lt;/p&gt;
&lt;div data-callout=&quot;note&quot;&gt;&lt;div&gt;
&lt;p&gt;While containing blocks deserve an entire deep dive post, in the meantime
thereâ€™s a &lt;a href=&quot;https://www.oddbird.net/feed.atom#containing-blocks&quot;&gt;brief note&lt;/a&gt; at the end of this article.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The containing block for the positioned element cannot be a descendant of the
containing block for the anchor. Put a different way, the space in which the
positioned element can be positioned cannot be smaller than the space in which
the anchor can be positioned. (Note: this is technically less accurate, but it
helps me visualize the rule.)&lt;/p&gt;
&lt;div data-callout=&quot;note&quot;&gt;&lt;div&gt;
&lt;p&gt;Add this to your mental model:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The space in which the positioned element can be positioned cannot be smaller
than the space in which the anchor can be positioned.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;!-- TODO: Is there a visual way of showing this? --&gt;
&lt;p&gt;Crucially, if the anchor element is a parent to the positioned element and
creates a containing box for the positioned element, anchor positioning will not
work. The positioned elementâ€™s containing box will be the anchor, and the
anchorâ€™s containing box will be one of its ancestors.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-slug-hash=&quot;raBdLWP&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;jamessw&quot; data-embed-version=&quot;2&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/jamessw/pen/raBdLWP&quot;&gt;Absolute anchor order&lt;/a&gt; by &lt;a href=&quot;https://codepen.io/jamessw&quot;&gt;@jamessw&lt;/a&gt; on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are many things that can cause the anchor element to create a containing
block, and positioned elements that are children will not work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you set a &lt;code&gt;position&lt;/code&gt; besides &lt;code&gt;static&lt;/code&gt; on the anchor and the positioned
element is &lt;code&gt;position: absolute&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If you transform the anchor element somehow, with &lt;code&gt;transform&lt;/code&gt;, &lt;code&gt;translate&lt;/code&gt;,
&lt;code&gt;scale&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;If the anchor element is a query container for container size queries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is not an exhaustive list. Because there are so many ways to get into this
situation unexpectedly, I recommend not nesting positioned elements inside the
anchor.&lt;/p&gt;
&lt;h3 id=&quot;valid-anchor-pseudo-elements&quot;&gt;Valid anchor pseudo-elements&lt;/h3&gt;
&lt;p&gt;Most anchors will be elements, but if youâ€™re using a pseudo-element, not all
qualify. The pseudo-element must be a â€œfully styleable tree-abiding
pseudo-element.â€ Tree-abiding pseudo-elements behave like regular elements,
unlike pseudo-elements like &lt;code&gt;::first-letter&lt;/code&gt; or &lt;code&gt;::spelling-error&lt;/code&gt;. Some, like
&lt;code&gt;::marker&lt;/code&gt; or &lt;code&gt;::placeholder&lt;/code&gt;, are not fully styleable, as they only allow some
CSS properties.&lt;/p&gt;
&lt;p&gt;The valid pseudo-elements are &lt;code&gt;::before&lt;/code&gt;, &lt;code&gt;::after&lt;/code&gt; and
&lt;code&gt;::file-selector-button&lt;/code&gt;. &lt;code&gt;::-webkit-slider-thumb&lt;/code&gt; currently works as an anchor
in Chrome, but as it is experimental and not part of any CSS spec, itâ€™s unclear
whether it should.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;200&quot; data-slug-hash=&quot;GgKxNWV&quot; data-default-tab=&quot;result&quot; data-user=&quot;jamessw&quot; data-embed-version=&quot;2&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/jamessw/pen/GgKxNWV&quot;&gt;Valid anchor pseudo-elements&lt;/a&gt; by &lt;a href=&quot;https://codepen.io/jamessw&quot;&gt;@jamessw&lt;/a&gt; on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;anchor-scope&quot;&gt;Anchor scope&lt;/h3&gt;
&lt;p&gt;Anchor scope is great for making reusable anchoring rules, especially if you are
anchoring on a list item or reusing styles. If youâ€™re using &lt;code&gt;anchor-scope&lt;/code&gt;,
verify that both the anchor and positioned element are descendants of the
element with the &lt;code&gt;anchor-scope&lt;/code&gt; rule, or if the anchor itself has the
&lt;code&gt;anchor-scope&lt;/code&gt; rule, that the positioned element is a descendant of the anchor.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;200&quot; data-slug-hash=&quot;QwLVGjZ&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;jamessw&quot; data-embed-version=&quot;2&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/jamessw/pen/QwLVGjZ&quot;&gt;Anchor Scope&lt;/a&gt; by &lt;a href=&quot;https://codepen.io/jamessw&quot;&gt;@jamessw&lt;/a&gt; on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;absolute-anchor-order&quot;&gt;Absolute anchor order&lt;/h3&gt;
&lt;p&gt;This is the motivation behind the recommended solution to have the anchor come
before the positioned element in the DOM.&lt;/p&gt;
&lt;p&gt;Generally, absolutely positioned elements are rendered after relatively
positioned elements. If the anchor element is absolutely positioned, then the
positioned element must come after the anchor in the DOM.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;200&quot; data-slug-hash=&quot;xbKpedP&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;jamessw&quot; data-embed-version=&quot;2&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/jamessw/pen/xbKpedP&quot;&gt;Absolute anchor order&lt;/a&gt; by &lt;a href=&quot;https://codepen.io/jamessw&quot;&gt;@jamessw&lt;/a&gt; on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;div data-callout=&quot;note&quot;&gt;&lt;div&gt;
&lt;p&gt;The â€œafter the anchor in the DOMâ€ check happens on the &lt;code&gt;flat tree&lt;/code&gt;, which means
that it happens after slotted content is placed and shadow hosts are filled with
their children.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;top-layer&quot;&gt;Top layer&lt;/h3&gt;
&lt;p&gt;If you are using dialogs as modals or popovers, you are creating top layers. If
the anchor element is in a &lt;a href=&quot;https://drafts.csswg.org/css-position-4/#top-layer&quot;&gt;higher top
layer&lt;/a&gt; than the positioned
element, the positioned element will not be able to locate the anchor.&lt;/p&gt;
&lt;p&gt;You can position the root popover or dialog directly using &lt;code&gt;position: absolute&lt;/code&gt;.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;200&quot; data-slug-hash=&quot;OPLzjJq&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;jamessw&quot; data-embed-version=&quot;2&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/jamessw/pen/OPLzjJq&quot;&gt;Top Layer&lt;/a&gt; by &lt;a href=&quot;https://codepen.io/jamessw&quot;&gt;@jamessw&lt;/a&gt; on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, if you want to position an element that is inside the popover or
dialog, you will need to use &lt;code&gt;position: fixed&lt;/code&gt;. Note that the positioned
elements are not inside their parents in this example â€“ &lt;code&gt;position: fixed&lt;/code&gt; moves
the elementâ€™s containing block to the viewport and allows positioning to work.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;250&quot; data-slug-hash=&quot;vEBbVXq&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;jamessw&quot; data-embed-version=&quot;2&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/jamessw/pen/vEBbVXq&quot;&gt;Top Layer - inside&lt;/a&gt; by &lt;a href=&quot;https://codepen.io/jamessw&quot;&gt;@jamessw&lt;/a&gt; on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;anchoring-across-shadow-trees&quot;&gt;Anchoring across shadow trees&lt;/h3&gt;
&lt;p&gt;An element in one tree can anchor to an element in another tree, as long as the
relevant styles are all defined in the same style tree. In other words, if
&lt;code&gt;anchor-name&lt;/code&gt; is defined in a shadow tree, the &lt;code&gt;position-anchor&lt;/code&gt; or &lt;code&gt;anchor()&lt;/code&gt;
styles must also be defined in that shadow tree. If the &lt;code&gt;anchor-name&lt;/code&gt; is defined
outside a shadow tree using &lt;code&gt;::part()&lt;/code&gt;, then the &lt;code&gt;position-anchor&lt;/code&gt; or &lt;code&gt;anchor()&lt;/code&gt;
styles can be defined outside as well.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;250&quot; data-slug-hash=&quot;zxOWoOE&quot; data-default-tab=&quot;result&quot; data-user=&quot;jamessw&quot; data-embed-version=&quot;2&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/jamessw/pen/zxOWoOE&quot;&gt;Anchor on Shadow Part&lt;/a&gt; by &lt;a href=&quot;https://codepen.io/jamessw&quot;&gt;@jamessw&lt;/a&gt; on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;containing-blocks&quot; tabindex=&quot;-1&quot;&gt;Containing blocks&lt;/h2&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Notably, a containing block is not a box (it is a
rectangle)â€¦&lt;/p&gt;
&lt;p&gt;â€”&lt;a href=&quot;https://drafts.csswg.org/css-display-4/#containing-block&quot;&gt;CSS Display Module Level 4
spec&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Great, I totally understandâ€¦&lt;/p&gt;
&lt;p&gt;You likely have run into containing blocks before. When you are positioning
something with absolute positioning, it is positioned relative to its containing
block.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-slug-hash=&quot;NPKyRPm&quot; data-default-tab=&quot;result&quot; data-user=&quot;jamessw&quot; data-embed-version=&quot;2&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/jamessw/pen/NPKyRPm&quot;&gt;Containing box for absolutely positioned element&lt;/a&gt; by &lt;a href=&quot;https://codepen.io/jamessw&quot;&gt;@jamessw&lt;/a&gt; on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you use percentages to define widths and heights, these are calculated
relative to the elementâ€™s containing block.&lt;/p&gt;
&lt;p&gt;To figure out an elementâ€™s containing block, find the ancestor element that the
elementâ€™s position and size are relative to. This is dependent on the elementâ€™s
&lt;code&gt;position&lt;/code&gt; value, so for example, if the element is fixed position, the
containing block can be the viewport, or if the element is relative position,
the containing block could be generated by an ancestor &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;Iâ€™ve found MDNâ€™s guide on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block&quot;&gt;Identifying the containing
block&lt;/a&gt;
a helpful resource to unravel the containing block.&lt;/p&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;ways-to-make-this-easier&quot; tabindex=&quot;-1&quot;&gt;Ways to make this easier&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Troubleshooting why an anchor is not found is not fun or easy. Anchor
Positioning is in its early days, but as adoption grows, I hope we can find ways
to make this easier.&lt;/p&gt;
&lt;p&gt;An important part will be to improve dev tooling when an anchor is not found.
Perhaps next to a &lt;code&gt;--anchor is not found&lt;/code&gt; message, there could be a crosshair
selector to select the DOM element you thought would be the anchor. Then the Dev
Tools could provide a specific message of why that particular combination would
not work.&lt;/p&gt;
&lt;p&gt;Another useful improvement would be a method to identify an elementâ€™s containing
block. Perhaps there could be a new &lt;code&gt;:containing-block&lt;/code&gt; pseudo-class that
selects the element that creates the containing block, or a
&lt;code&gt;HTMLElement.containingBlock&lt;/code&gt; attribute. Because this is primarily useful while
developing, it may be better to instead add a way of finding this in Dev Tools,
instead of through browser APIs.&lt;/p&gt;
&lt;p&gt;I think we also need to find better mental models to understand render order and
containing blocks. Is there a way we could move this from a set of guidelines
and a checklist of gotchas to avoid, to a place where these rules click and make
sense to developers?&lt;/p&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;sponsor-us&quot; tabindex=&quot;-1&quot;&gt;Sponsor us&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;If you found this article helpful, please &lt;a href=&quot;https://opencollective.com/oddbird-open-source&quot;&gt;sponsor our
work&lt;/a&gt;! Deep dives like this take
time and energy, and we want to keep them coming!&lt;/p&gt;
&lt;p&gt;You can also &lt;a href=&quot;https://www.oddbird.net/contact/&quot;&gt;hire us&lt;/a&gt; to develop the &lt;a href=&quot;https://anchor-positioning.oddbird.net/&quot;&gt;Anchor Positioning
polyfill&lt;/a&gt; or another OSS language/tool
you rely on. Our client work also helps fund our educational work like this
article, so get in touch with us if you have any web development needs.&lt;/p&gt;
</content>
    <category term='Article' />
    <category term='Anchor Positioning' />
    <category term='CSS' />
  </entry>
  <entry>
    <title>Relative Units &amp; Typography</title>
    <link href="https://www.oddbird.net/2025/01/24/winging-it-15/"/>
    <updated>2025-01-24T00:00:00Z</updated>
    <id>https://www.oddbird.net/2025/01/24/winging-it-15/</id><author>
        <name>Miriam Suzanne</name>
        <uri>https://www.oddbird.net/authors/miriam/</uri>
      </author>
    <author>
        <name>Stacy Kvernmo</name>
        <uri>https://www.oddbird.net/authors/stacy/</uri>
      </author>
    <content type="html">&lt;img src=&quot;https://www.oddbird.net/assets/images/winging-it/winging-it-15-1600w.jpeg&quot; alt=&quot;&quot;/&gt;&lt;p&gt;Join Miriam Suzanne, Stacy Kvernmo,
and special guest
&lt;a href=&quot;https://github.com/astearns&quot;&gt;Alan Stearns&lt;/a&gt; â€“
typography enthusiast, co-chair
of the CSS Working Group,
and self-described CSS Panjandrum â€“
for a conversation about typography.&lt;/p&gt;
&lt;p&gt;Responsive Typography has been around
for at least a decade in various forms,
but has become even more popular
with tools like &lt;a href=&quot;https://utopia.fyi&quot;&gt;Utopia.fyi&lt;/a&gt;, &lt;a href=&quot;https://fluid.style&quot;&gt;Fluid.style&lt;/a&gt;, &lt;a href=&quot;https://github.com/Typetura/&quot;&gt;Typetura&lt;/a&gt;,
and more â€“ all relying
on the latest CSS units and math functions.
But there are still a lot of questions worth asking.&lt;/p&gt;
&lt;figure class=&quot;embed&quot;&gt;
      &lt;div class=&quot;gallery&quot;&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p class=&quot;main-action&quot;&gt;&lt;a href=&quot;http://www.youtube.com/channel/UCUkHxN78y9On9YH1zd-aTGw?sub_confirmation=1&quot;&gt;Subscribe to Channel Â»&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;what-we-cover%3A&quot; tabindex=&quot;-1&quot;&gt;What we cover:&lt;/h2&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;What do users really want when they change the default browser font size?&lt;/li&gt;
&lt;li&gt;Is it appropriate for padding and margins to grow along with text?&lt;/li&gt;
&lt;li&gt;What all should we be responding to, and can CSS do whatâ€™s required?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;links%3A&quot; tabindex=&quot;-1&quot;&gt;Links:&lt;/h2&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://adrianroselli.com/2024/03/the-ultimate-ideal-bestest-base-font-size-that-everyone-is-keeping-a-secret-especially-chet.html&quot;&gt;The Ultimate Ideal Bestest Base Font Size That Everyone Is Keeping a Secret, Especially Chet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ashleemboyer.com/blog/why-you-should-use-px-units-for-margin-padding-and-other-spacing-techniques&quot;&gt;Why You Should Use px Units for margin, padding, &amp;amp; Other Spacing Techniques&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;demos%3A&quot; tabindex=&quot;-1&quot;&gt;Demos:&lt;/h2&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://codepen.io/miriamsuzanne/pen/KKjVQMK?editors=1100&quot;&gt;Viewport spacing, px guardrails, font-rounding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    <category term='Winging It' />
    <category term='Show Notes' />
    <category term='Video' />
    <category term='CSS' />
    <category term='Typography' />
    <category term='Fonts' />
  </entry>
  <entry>
    <title>CSS IS AWESOME Game</title>
    <link href="https://www.oddbird.net/2024/12/17/winging-it-14/"/>
    <updated>2024-12-17T00:00:00Z</updated>
    <id>https://www.oddbird.net/2024/12/17/winging-it-14/</id><author>
        <name>Miriam Suzanne</name>
        <uri>https://www.oddbird.net/authors/miriam/</uri>
      </author>
    <author>
        <name>Stacy Kvernmo</name>
        <uri>https://www.oddbird.net/authors/stacy/</uri>
      </author>
    <content type="html">&lt;img src=&quot;https://www.oddbird.net/assets/images/winging-it/winging-it-14-1600w.jpeg&quot; alt=&quot;&quot;/&gt;&lt;p&gt;On December 17, 1996,
the W3C published the first standard for CSS,
and we celebrated the anniversary on Winging It!
&lt;a href=&quot;https://michellebarker.co.uk/&quot;&gt;Michelle Barker&lt;/a&gt;,
&lt;a href=&quot;https://thinkdobecreate.com/&quot;&gt;Stephanie Eckles&lt;/a&gt;,
&lt;a href=&quot;https://www.kevinpowell.co/&quot;&gt;Kevin Powell&lt;/a&gt;,
and &lt;a href=&quot;https://bsky.app/profile/henrihelvetica.bsky.social&quot;&gt;Henri Helvetica&lt;/a&gt;
joined us for our â€œCSS Is Awesomeâ€ game.
If you love CSS as much as we do,
we hope you will play along
as we battle it out
to see who is AWESOME.&lt;/p&gt;
&lt;figure class=&quot;embed&quot;&gt;
      &lt;div class=&quot;gallery&quot;&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p class=&quot;main-action&quot;&gt;&lt;a href=&quot;http://www.youtube.com/channel/UCUkHxN78y9On9YH1zd-aTGw?sub_confirmation=1&quot;&gt;Subscribe to Channel Â»&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;games-we-play%3A&quot; tabindex=&quot;-1&quot;&gt;Games we play:&lt;/h2&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;7-Point Polygon&lt;/li&gt;
&lt;li&gt;Password Reset&lt;/li&gt;
&lt;li&gt;Jeoparty&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;example-questions%3A&quot; tabindex=&quot;-1&quot;&gt;Example questions:&lt;/h2&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;What is the unit for quarter-millimeters?&lt;/li&gt;
&lt;li&gt;This function lets you perform calculations when specifying CSS property
values&lt;/li&gt;
&lt;li&gt;Name 7 &lt;code&gt;&amp;lt;filter-function&amp;gt;&lt;/code&gt; values&lt;/li&gt;
&lt;li&gt;#A47864 is the hex code for this color, which is Pantoneâ€™s color of the year&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;links%3A&quot; tabindex=&quot;-1&quot;&gt;Links:&lt;/h2&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://enes.in/sorted-colors/&quot;&gt;Sorted Colors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://meyerweb.com/eric/css/colors/&quot;&gt;Color Equivalents Table&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    <category term='Winging It' />
    <category term='Show Notes' />
    <category term='Video' />
    <category term='CSS' />
  </entry>
  <entry>
    <title>Sass Indented Syntax Improvements</title>
    <link href="https://www.oddbird.net/2024/12/03/sass-indented/"/>
    <updated>2024-12-03T00:00:00Z</updated>
    <id>https://www.oddbird.net/2024/12/03/sass-indented/</id><author>
        <name>James Stuckey Weber</name>
        <uri>https://www.oddbird.net/authors/james/</uri>
      </author>
    <content type="html">&lt;img src=&quot;https://www.oddbird.net/assets/images/blog/elsewhere/sass-brackets-1600w.jpeg&quot; alt=&quot;Indoor plants in pots on a floating shelf
held up by brackets.
&quot;/&gt;&lt;p&gt;The Sass indented format is getting more flexible with the ability to have multiline statements, semicolons, and more.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://sass-lang.com/blog/rfc-indented-syntax/&quot;  &gt;Read the full article Â»&lt;/a&gt;&lt;/p&gt;&lt;p&gt;OddBird is proposing the introduction of parts of SCSS syntax into the
indented format. Some highlights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multiline statements for long values, improving readability of properties
like &lt;code&gt;grid-template&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Linebreaks now treated as whitespace anywhere you canâ€™t end a statement&lt;/li&gt;
&lt;li&gt;A â€œSCSS-in-Sassâ€ syntax to opt in to SCSS formatting inline&lt;/li&gt;
&lt;li&gt;Optional semicolons&lt;/li&gt;
&lt;/ul&gt;
</content>
    <category term='Link' />
    <category term='CSS' />
    <category term='Sass' />
  </entry>
  <entry>
    <title>Baseline and Web Features</title>
    <link href="https://www.oddbird.net/2024/11/19/winging-it-13/"/>
    <updated>2024-11-19T00:00:00Z</updated>
    <id>https://www.oddbird.net/2024/11/19/winging-it-13/</id><author>
        <name>Miriam Suzanne</name>
        <uri>https://www.oddbird.net/authors/miriam/</uri>
      </author>
    <author>
        <name>James Stuckey Weber</name>
        <uri>https://www.oddbird.net/authors/james/</uri>
      </author>
    <content type="html">&lt;img src=&quot;https://www.oddbird.net/assets/images/winging-it/winging-it-13-1600w.jpeg&quot; alt=&quot;&quot;/&gt;&lt;p&gt;What happens when you set out
to categorize every API
and property of the web?
OddBird has been documenting CSS
for the Web Features project.
Join us as we explore some fascinating rabbit trails, edge cases,
and insights into the web platform
that weâ€™ve encountered along the way.&lt;/p&gt;
&lt;figure class=&quot;embed&quot;&gt;
      &lt;div class=&quot;gallery&quot;&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p class=&quot;main-action&quot;&gt;&lt;a href=&quot;http://www.youtube.com/channel/UCUkHxN78y9On9YH1zd-aTGw?sub_confirmation=1&quot;&gt;Subscribe to Channel Â»&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;what-we-cover%3A&quot; tabindex=&quot;-1&quot;&gt;What we cover:&lt;/h2&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;What is the Web Features project?
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/web-platform-dx/web-features&quot;&gt;Web Features on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bsky.app/profile/patrickbrosset.com/post/3lbensuvnx22z&quot;&gt;Patrick Brosset answers questions and provides context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OddBirdâ€™s contributions to documenting CSS features&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is Baseline?
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://web-platform-dx.github.io/web-features/&quot;&gt;Baseline explainer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How are they used?
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://web-platform-dx.github.io/web-features-explorer/release-notes/&quot;&gt;Web Features Explorer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://caniuse.com/?search=relative-colors&quot;&gt;Caniuse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MDN: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/radial-gradient&quot;&gt;radial-gradient()&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/attr&quot;&gt;attr()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/web-platform-dx/baseline-status&quot;&gt;&amp;lt;baseline-status&amp;gt; web component&lt;/a&gt;. Usage in the wild: &lt;a href=&quot;https://zeroheight.com/blog/the-lowdown-on-dropdowns-in-html-css/&quot;&gt;The Lowdown on Dropdowns in HTML &amp;amp; CSS&lt;/a&gt; by David Darnes&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bcd-watch.igalia.com/&quot;&gt;Keeping an eye on changes to MDNâ€™s Browser Compatibility Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What challenges have we encountered?
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://a11ysupport.io/&quot;&gt;a11y Support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fun things that have surfaced
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://drafts.csswg.org/css-speech-1/&quot;&gt;CSS Speech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tink.uk/why-we-need-css-speech/&quot;&gt;Why We Need CSS Speech&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Whatâ€™s next in Web Features?
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tonypconway/bl2bl&quot;&gt;bl2bl&lt;/a&gt;: A module for turning Baseline thresholds into browserslist configurations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    <category term='Winging It' />
    <category term='Show Notes' />
    <category term='Video' />
    <category term='CSS' />
  </entry>
  <entry>
    <title>Anchor Positioning Is Disruptive</title>
    <link href="https://www.oddbird.net/2024/11/18/anchor-position-yearbook/"/>
    <updated>2024-11-18T00:00:00Z</updated>
    <id>https://www.oddbird.net/2024/11/18/anchor-position-yearbook/</id><author>
        <name>James Stuckey Weber</name>
        <uri>https://www.oddbird.net/authors/james/</uri>
      </author>
    <content type="html">&lt;img src=&quot;https://www.oddbird.net/assets/images/blog/2024/boatknot-1600w.jpeg&quot; alt=&quot;A symmetrical knot with thick rope lying on weathered wood.
&quot;/&gt;&lt;p&gt;The more I play with it, the more convinced I am that anchor positioning is
going to unlock some surprising new layouts.&lt;/p&gt;
&lt;p&gt;Many of the initial examples and use cases for anchor positioning are
simplifying existing possibilities, and â€“ donâ€™t misunderstand me â€“ anchor
positioning will simplify how dropdown menus are implemented significantly.&lt;/p&gt;
&lt;p&gt;But thatâ€™s just the start.&lt;/p&gt;
&lt;p&gt;I first got a glimpse at the possibilities while watching the &lt;a href=&quot;https://www.youtube.com/watch?v=p18LhnYNkDQ&quot;&gt;Anchor
Positioning session&lt;/a&gt; at CSS Day
2024 from Tab Atkins-Bittner, an editor of the &lt;a href=&quot;https://drafts.csswg.org/css-anchor-position-1/&quot;&gt;CSS
spec&lt;/a&gt;. Hidden in Tabâ€™s
presentation on anchor positioning was the concept of using an
anchored item as an anchor to ensure that anchored elements donâ€™t overlap.&lt;/p&gt;
&lt;p&gt;Itâ€™s a simple but powerful trick â€“ in the demo, they are building side notes,
with words in a paragraph of text that are anchors for some additional content
displayed inline to the side. &lt;code&gt;top: max(anchor(--word top), anchor(--note bottom))&lt;/code&gt; will set the &lt;code&gt;top&lt;/code&gt; of the note to the higher value of the top of the
anchoring word OR the bottom of the note above it.&lt;/p&gt;
&lt;figure class=&quot;embed&quot;&gt;
      &lt;div class=&quot;gallery&quot;&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.oddbird.net/assets/images/blog/2024/anchor-comments-480w.webp 480w, https://www.oddbird.net/assets/images/blog/2024/anchor-comments-960w.webp 960w, https://www.oddbird.net/assets/images/blog/2024/anchor-comments-1292w.webp 1292w&quot; sizes=&quot;(min-width: 45em) 50vw, 100vw&quot;&gt;&lt;img alt=&quot;screenshot of text with comments on side, aligned with related words&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;&quot; src=&quot;https://www.oddbird.net/assets/images/blog/2024/anchor-comments-480w.jpeg&quot; width=&quot;1292&quot; height=&quot;646&quot; srcset=&quot;https://www.oddbird.net/assets/images/blog/2024/anchor-comments-480w.jpeg 480w, https://www.oddbird.net/assets/images/blog/2024/anchor-comments-960w.jpeg 960w, https://www.oddbird.net/assets/images/blog/2024/anchor-comments-1292w.jpeg 1292w&quot; sizes=&quot;(min-width: 45em) 50vw, 100vw&quot;&gt;&lt;/picture&gt;&lt;/div&gt;&lt;figcaption class=&quot;caption&quot;&gt;A demo from Tab Atkins-Bittnerâ€™s &lt;a href=&quot;https://tabatkins.com/talks/2024-06-07/&quot;&gt;slides&lt;/a&gt; from CSS Day 2024&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;This concept unlocks a lot of possibilities that I donâ€™t think were easy to
achieve before.&lt;/p&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;yearbook-photo-page&quot; tabindex=&quot;-1&quot;&gt;Yearbook Photo Page&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Imagine a high school yearbookâ€™s photo spread. There are rows of headshots, and
to the side of each row, there is a column with the names of each person in that
row. Itâ€™s not a terribly difficult layout for print, but there are a few
challenges to implement it in HTML.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.oddbird.net/assets/images/blog/2024/anchor-position-yearbook-layout-480w.webp 480w, https://www.oddbird.net/assets/images/blog/2024/anchor-position-yearbook-layout-960w.webp 960w, https://www.oddbird.net/assets/images/blog/2024/anchor-position-yearbook-layout-1600w.webp 1600w&quot; sizes=&quot;(min-width: 45em) 50vw, 100vw&quot;&gt;&lt;img alt=&quot;A rough wireframe of photos and aligned names&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.oddbird.net/assets/images/blog/2024/anchor-position-yearbook-layout-480w.jpeg&quot; width=&quot;1600&quot; height=&quot;1178&quot; srcset=&quot;https://www.oddbird.net/assets/images/blog/2024/anchor-position-yearbook-layout-480w.jpeg 480w, https://www.oddbird.net/assets/images/blog/2024/anchor-position-yearbook-layout-960w.jpeg 960w, https://www.oddbird.net/assets/images/blog/2024/anchor-position-yearbook-layout-1600w.jpeg 1600w&quot; sizes=&quot;(min-width: 45em) 50vw, 100vw&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;First, it would be a challenge to have the name and the photo of each person
together in the HTML. Also, if it needed to be responsive, with different
numbers of photos per row, Iâ€™d likely have to have multiple layouts defined in
CSS, and potentially duplicate the items in the HTML, and conditionally show
them based on some magic number.&lt;/p&gt;
&lt;p&gt;When working with anchor positioning, Iâ€™ve found it helpful to borrow the
concept of constraints from mobile development, where you describe your layout
in terms of relationships between elements. So, letâ€™s start by defining our
constraints:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The left side of the names should be &lt;code&gt;1em&lt;/code&gt; to the right of the photos.&lt;/li&gt;
&lt;li&gt;Each name should be in the same row as its photo, starting at the top.&lt;/li&gt;
&lt;li&gt;Each name should be below the name preceding it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is all possible with anchor positioning, and we can even have the image and
name inside of the same &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;photo1.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Name 1&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;photo2.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Name 2&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  ...
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Weâ€™ll make the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; the main photo area, use &lt;code&gt;flex-wrap: wrap&lt;/code&gt; to fit as many
photos in a row as possible, and make it an anchor by giving it &lt;code&gt;anchor-name: --photos&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then we can place the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; titles to meet the first constraint.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; absolute&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;anchor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--photos right&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; + 1em&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thatâ€™s right â€“ we donâ€™t need to first figure out how many pixels from the left
viewport edge the photos are, we can just declaratively describe what we want.
â€œPlace the left edge at the sum of photosâ€™ right side and &lt;code&gt;1em&lt;/code&gt;â€.&lt;/p&gt;
&lt;p&gt;We can then satisfy the second constraint, that each name should be in the same
row as its photo.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;anchor-name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; --photo&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;anchor-scope&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; --photo&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;anchor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--photo top&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;top&lt;/code&gt; rule simply aligns the top of the name with the top of the photo. The
&lt;code&gt;anchor-scope&lt;/code&gt; is important here. By default, if there are multiple elements
that have the same &lt;code&gt;anchor-name&lt;/code&gt;, the last element in the DOM will be selected.
Setting &lt;code&gt;anchor-scope&lt;/code&gt; on a parent element means that the anchored element wonâ€™t
look outside of the parent element for an anchor. This means the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; will be
aligned with the top of its photo.&lt;/p&gt;
&lt;p&gt;But wait â€“ we have one more constraint. At this point, all the names in a row are
layered on top of each other. We want them to vertically stack instead.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;anchor-name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; --title&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;anchor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--photo top&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;anchor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--title bottom&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, the top of the name will be either the top of the photo OR the bottom of
the title above it, whichever is greater (or further down the page). Thatâ€™s
because the anchoring element has to come &lt;strong&gt;before&lt;/strong&gt; the anchored element, which
means the reference to &lt;code&gt;anchor(--title)&lt;/code&gt; will be the name above it.&lt;/p&gt;
&lt;p&gt;Iâ€™d recommend &lt;a href=&quot;https://codepen.io/jamessw/pen/PoMvNwm&quot;&gt;viewing this on Codepen&lt;/a&gt;
so you can resize the demo. Iâ€™ve added a short transition to the &lt;code&gt;top&lt;/code&gt; property
so you can see how the names adjust as the names above them move.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;500&quot; data-slug-hash=&quot;PoMvNwm&quot; data-default-tab=&quot;result&quot; data-user=&quot;jamessw&quot; data-embed-version=&quot;2&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/jamessw/pen/PoMvNwm&quot;&gt;CSS Anchor Positioning - Yearbook layout&lt;/a&gt; by &lt;a href=&quot;https://codepen.io/jamessw&quot;&gt;@jamessw&lt;/a&gt; on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that Chromium released support for &lt;code&gt;anchor-scope&lt;/code&gt; in version 131, but since
the polyfill doesnâ€™t support partial polyfilling, this demo will only work in
Chromium before 125, after 131, or in a non-Chromium browser.&lt;/p&gt;
&lt;p&gt;As an added bonus, because the photo and name are in the same &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;, we can add
hover effects so that if one is hovered, both parts are hovered. If the item is
a link they can be inside the same &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;wrap-up&quot; tabindex=&quot;-1&quot;&gt;Wrap-up&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;What new possibilities for anchor positioning are you excited about? Let us know
by sending us a message on &lt;a href=&quot;https://front-end.social/@oddbird&quot;&gt;Mastodon&lt;/a&gt; or
&lt;a href=&quot;https://bsky.app/profile/oddbird.dev&quot;&gt;BlueSky&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And if youâ€™re excited to use anchor positioning before it becomes baseline,
check out our &lt;a href=&quot;https://github.com/oddbird/css-anchor-positioning&quot;&gt;polyfill&lt;/a&gt;. It
supports enough of the anchor positioning spec to do most things.&lt;/p&gt;
&lt;p&gt;There are two ways to help us keep this work sustainable and centered on your
needs as a developer!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://opencollective.com/oddbird-open-source&quot;&gt;Sponsor us&lt;/a&gt;. We display
sponsor logos and avatars here on our &lt;a href=&quot;https://www.oddbird.net/feed.atom#open-source-sponsors&quot;&gt;website&lt;/a&gt; and
offer &lt;a href=&quot;https://github.com/sponsors/oddbird&quot;&gt;other fun perks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.oddbird.net/contact/&quot;&gt;Hire us&lt;/a&gt; to develop the Anchor Positioning polyfill or another
OSS language/tool you rely on. Our client work also helps fund our open
source work like this polyfill, so get in touch with us if you have any web
development needs.&lt;/li&gt;
&lt;/ol&gt;
</content>
    <category term='Article' />
    <category term='Open Source' />
    <category term='Anchor Positioning' />
    <category term='CSS' />
    <category term='Polyfill' />
  </entry>
  <entry>
    <title>Updates to the Most Desired CSS Feature You Can&#39;t Use Yet</title>
    <link href="https://www.oddbird.net/2024/11/12/anchor-position-polyfill-2/"/>
    <updated>2024-11-12T00:00:00Z</updated>
    <id>https://www.oddbird.net/2024/11/12/anchor-position-polyfill-2/</id><author>
        <name>James Stuckey Weber</name>
        <uri>https://www.oddbird.net/authors/james/</uri>
      </author>
    <content type="html">&lt;img src=&quot;https://www.oddbird.net/assets/images/blog/2024/anchor2-1600w.jpeg&quot; alt=&quot;A pay-to-use pair of binoculars at a scenic overlook.
&quot;/&gt;&lt;p&gt;Our sponsors are supporting the continued development of the
CSS Anchor Positioning Polyfill.
Hereâ€™s a summary of the latest updates.&lt;/p&gt;
&lt;p&gt;A lot has happened with Anchor Positioning since our &lt;a href=&quot;https://www.oddbird.net/2024/07/02/anchor-position-polyfill/&quot;&gt;last update&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Along with changes to the spec and Chromiumâ€™s continued work towards
implementing the spec, thereâ€™s been a lot of interest in using anchor
positioning. In fact, the State of CSS survey identified anchor positioning as
the &lt;a href=&quot;https://2024.stateofcss.com/en-US/usage/#css_interoperability_features&quot;&gt;most desired
feature&lt;/a&gt;
that you canâ€™t yet use because of browser
incompatibilities.&lt;/p&gt;
&lt;p&gt;And while itâ€™s true that anchor positioning is only implemented in Chromium
browsers, our team at OddBird has made a lot of progress in our goal of
catching up our &lt;a href=&quot;https://github.com/oddbird/css-anchor-positioning&quot;&gt;polyfill&lt;/a&gt; to
the spec. Based on the feedback weâ€™re hearing, people are finding it covers
enough of their needs to be able to start using anchor positioning in
production.&lt;/p&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;pseudo-element-support&quot; tabindex=&quot;-1&quot;&gt;Pseudo-element support&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ayoreis&quot;&gt;@ayoreis&lt;/a&gt; added support for using &lt;code&gt;::before&lt;/code&gt; and
&lt;code&gt;::after&lt;/code&gt; pseudo-elements as anchoring elements.&lt;/p&gt;
&lt;div data-callout=&quot;note&quot;&gt;&lt;div&gt;
&lt;p&gt;&lt;strong&gt;What pseudo-elements can be anchors?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://drafts.csswg.org/css-anchor-position-1/#target&quot;&gt;specification&lt;/a&gt;
defining which pseudo-elements can be anchors was recently updated from
&lt;code&gt;part-like&lt;/code&gt; to &lt;code&gt;fully styleable tree-abiding pseudo-element&lt;/code&gt;. This means that
&lt;code&gt;::file-selector-button&lt;/code&gt; and &lt;code&gt;::details-content&lt;/code&gt; are not anchors.
&lt;code&gt;::-webkit-slider-thumb&lt;/code&gt; is not likely to fit this criteria either, which is a
shame as itâ€™s been &lt;a href=&quot;https://codepen.io/jamessw/pen/KKLMJKm&quot;&gt;extremely&lt;/a&gt;
&lt;a href=&quot;https://codepen.io/jamessw/pen/ZENpWao&quot;&gt;useful&lt;/a&gt; for examples.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;support-for-scoping-anchor-names&quot; tabindex=&quot;-1&quot;&gt;Support for scoping anchor names&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mmalerba&quot;&gt;@mmalerba&lt;/a&gt; added support for &lt;code&gt;anchor-scope&lt;/code&gt;, which
is extremely useful when working with lists of elements that each have their own
anchor elements.&lt;/p&gt;
&lt;p&gt;In this example, anchoring is applied with shared &lt;code&gt;.target&lt;/code&gt; and &lt;code&gt;.anchor&lt;/code&gt; rules,
meaning there are multiple elements with &lt;code&gt;anchor-name: --list-item&lt;/code&gt; set. By
default, the last element with that rule will be the anchor.&lt;/p&gt;
&lt;p&gt;But thatâ€™s not what we want. We want the anchoring element within the same list
item to be our anchor. To do that, set &lt;code&gt;anchor-scope: --list-item&lt;/code&gt; on
the &lt;code&gt;li&lt;/code&gt; element to limit the search for an anchoring element.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;500&quot; data-slug-hash=&quot;qBeJePX&quot; data-default-tab=&quot;result&quot; data-user=&quot;jamessw&quot; data-embed-version=&quot;2&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/jamessw/pen/qBeJePX&quot;&gt;Popover with anchor-scope&lt;/a&gt; by &lt;a href=&quot;https://codepen.io/jamessw&quot;&gt;@jamessw&lt;/a&gt; on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that Chromium released support for &lt;code&gt;anchor-scope&lt;/code&gt; in version 131, but since
the polyfill doesnâ€™t support partial polyfilling, this demo will only work in
Chromium before 125, after 131, or in a non-Chromium browser.&lt;/p&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;position-fallbacks&quot; tabindex=&quot;-1&quot;&gt;Position fallbacks&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;What happens when an anchored element doesnâ€™t fit where it would go? We
implemented the &lt;a href=&quot;https://drafts.csswg.org/css-anchor-position/#fallback&quot;&gt;Overflow
Management&lt;/a&gt; portion of
the spec to handle that.&lt;/p&gt;
&lt;p&gt;In simple cases, you could add &lt;code&gt;position-try: flip-block, flip-inline, flip-start;&lt;/code&gt; to first try flipping over the block axis, then the inline axis,
then over a diagonal axis. You can even combine the options.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;500&quot; data-slug-hash=&quot;abrZPQY&quot; data-default-tab=&quot;result&quot; data-user=&quot;jamessw&quot; data-embed-version=&quot;2&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/jamessw/pen/abrZPQY&quot;&gt;Fallbacks with `position-try`&lt;/a&gt; by &lt;a href=&quot;https://codepen.io/jamessw&quot;&gt;@jamessw&lt;/a&gt; on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;performance-improvements&quot; tabindex=&quot;-1&quot;&gt;Performance improvements&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/oddbird/css-anchor-positioning/releases/tag/v0.3.0&quot;&gt;v0.3.0&lt;/a&gt;
was a performance-focused release. It turns out that applying anchor positioning
is a fairly intensive process, which is one of the reasons why itâ€™s getting
moved from the realm of JavaScript into the native browser.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/marchbox&quot;&gt;@marchbox&lt;/a&gt; contributed a huge win that allows you
to apply the polyfill to just the styles that impact anchor positioning. By
default, the polyfill parses all of your CSS, which is likely more than you
need. Youâ€™re now able to specify exactly which CSS stylesheets contain rules
that impact how you use anchor positioning, so not all CSS has to be parsed.&lt;/p&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;coming-soon&quot; tabindex=&quot;-1&quot;&gt;Coming soon&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;What are you excited for with anchor positioning? Weâ€™d love to implement
&lt;a href=&quot;https://github.com/oddbird/css-anchor-positioning/issues/181&quot;&gt;&lt;code&gt;position-area&lt;/code&gt;&lt;/a&gt;
and apply the polyfill to &lt;a href=&quot;https://github.com/oddbird/css-anchor-positioning/issues/91&quot;&gt;dynamic
elements&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are 2 ways to help us keep this work sustainable and centered on your
needs as a developer!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://opencollective.com/oddbird-open-source&quot;&gt;Sponsor us&lt;/a&gt;. We display
sponsor logos and avatars here on our &lt;a href=&quot;https://www.oddbird.net/feed.atom#open-source-sponsors&quot;&gt;website&lt;/a&gt; and
offer &lt;a href=&quot;https://github.com/sponsors/oddbird&quot;&gt;other fun perks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.oddbird.net/contact/&quot;&gt;Hire us&lt;/a&gt; to develop the Anchor Positioning polyfill or another
OSS language/tool you rely on. Our client work also helps fund our open
source work like this polyfill, so get in touch with us if you have any web
development needs.&lt;/li&gt;
&lt;/ol&gt;
</content>
    <category term='Article' />
    <category term='Open Source' />
    <category term='Anchor Positioning' />
    <category term='CSS' />
    <category term='Polyfill' />
  </entry>
  <entry>
    <title>What do survey demographics tell us?</title>
    <link href="https://www.oddbird.net/2024/11/04/css-demographics/"/>
    <updated>2024-11-04T00:00:00Z</updated>
    <id>https://www.oddbird.net/2024/11/04/css-demographics/</id><author>
        <name>Miriam Suzanne</name>
        <uri>https://www.oddbird.net/authors/miriam/</uri>
      </author>
    <content type="html">&lt;img src=&quot;https://www.oddbird.net/assets/images/blog/2024/demographics-1600w.jpeg&quot; alt=&quot;A green on dark-gray horizontal bar chart, with the labels cut off
&quot;/&gt;&lt;p&gt;Thereâ€™s been a lot of interest
in the results of the annual
State of CSS survey,
but are we asking all the right questions?&lt;/p&gt;
&lt;p&gt;Sacha Greifâ€™s annual
&lt;a href=&quot;https://2024.stateofcss.com/en-US/&quot;&gt;State of CSS survey&lt;/a&gt;
wrapped up recently,
and the results are available.&lt;/p&gt;
&lt;p&gt;Iâ€™ve seen a number of people
commenting on the
&lt;a href=&quot;https://2024.stateofcss.com/en-US/demographics/&quot;&gt;demographics data&lt;/a&gt;,
asking what it says about our industry.
&lt;a href=&quot;https://www.joshwcomeau.com/email/2024-10-22-css-survey/&quot;&gt;Josh Comeau&lt;/a&gt;
and &lt;a href=&quot;https://css-tricks.com/state-of-css-2024-results/&quot;&gt;Geoff Graham at CSS Tricks&lt;/a&gt;
both provide some great commentary.
For example:
men in the US seem to make significantly more money
than the rest of the field.
Josh also points out when some questions
have a low response rate.&lt;/p&gt;
&lt;p&gt;Those are great questions to ask.
But I havenâ€™t seen any analysis asking
if the survey demographics &lt;em&gt;actually match the industry&lt;/em&gt;.
Or how that would impact our understanding of other survey answers.
For this, I would include a number of demographic questions
from other sections of the survey â€“
such as &lt;a href=&quot;https://2024.stateofcss.com/en-US/usage/#industry_sector&quot;&gt;industry sector&lt;/a&gt;,
&lt;a href=&quot;https://2024.stateofcss.com/en-US/usage/#usage_type&quot;&gt;CSS usage&lt;/a&gt;,
and &lt;a href=&quot;https://2024.stateofcss.com/en-US/usage/#css_js_balance&quot;&gt;balance of time writing CSS (and HTML) vs JS&lt;/a&gt;.
Do we know how representative this is?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Are 80% of global CSS authors actually white?&lt;/li&gt;
&lt;li&gt;Are 90% of CSS authors men?&lt;/li&gt;
&lt;li&gt;Do the majority of CSS authors spend more time writing JS?&lt;/li&gt;
&lt;li&gt;Is CSS mostly used for web apps?&lt;/li&gt;
&lt;li&gt;Does the industry skew young to the same degree as the survey?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you donâ€™t know &lt;a href=&quot;https://www.kevinpowell.co/&quot;&gt;Kevin Powellâ€™s work teaching CSS&lt;/a&gt;,
I highly recommend it.
But as you might expect
his audience is weighted towards students.
If heâ€™s a &lt;a href=&quot;https://2024.stateofcss.com/en-US/demographics/#source&quot;&gt;primary source for respondents&lt;/a&gt;,
thatâ€™s likely to impact the demographics, right?&lt;/p&gt;
&lt;p&gt;Thereâ€™s no problem with that â€“
student perspectives are extremely useful! â€“
but it might change how we read the data.
With under 10,000 responses,
we know weâ€™re looking at a small
and self-selected sample of the field.
I know several excellent CSS authors
who didnâ€™t take the survey.
Are some more likely to respond than others?
For what reasons?
Are these results representative of CSS authors generally?
How would we know?&lt;/p&gt;
&lt;p&gt;The largest â€˜sourceâ€™ is the survey itself,
which likely represents repeat participants.
So where did they come from initially?
The earliest data I can find is
&lt;a href=&quot;https://2019.stateofcss.com/demographics/#source&quot;&gt;from the 2019 survey&lt;/a&gt;,
with the &lt;strong&gt;State of JS&lt;/strong&gt; survey
as the most popular source.
Maybe itâ€™s not surprising if a majority of those respondents
write JS as their primary job?&lt;/p&gt;
&lt;p&gt;In many cases,
polls use demographic data
&lt;em&gt;to adjust for response bias&lt;/em&gt; â€“
but that requires an understanding of how well
the demographics match the larger reality,
and also how that is likely to impact other data points.
How would it change our interpretation of the survey more generally
if we knew the answers to those questions?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do most CSS authors test their designs only on desktop,
or is that specific to people who write CSS on the side?&lt;/li&gt;
&lt;li&gt;Is Tailwind broadly popular,
or specifically within certain demographics?&lt;/li&gt;
&lt;li&gt;What other questions might arise from this analysis?&lt;/li&gt;
&lt;li&gt;Why arenâ€™t the OddBird &lt;a href=&quot;https://www.oddbird.net/wingingit/&quot;&gt;Winging It&lt;/a&gt; videos your top resource? ðŸ˜…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The survey does allow us
to break down the data in various ways â€“
and run comparisons.
I donâ€™t feel qualified to parse out
what correlations are significant or relevant.
But poking around a bit,
a few things jumped out out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Men seem more likely to write JS primarily,
while women are more likely to write CSS primarily.&lt;/li&gt;
&lt;li&gt;Respondents who write more JS are
less likely to test across environments
(and also less likely to answer that question).&lt;/li&gt;
&lt;li&gt;Respondents who write more JS are
more likely to be working on applications.&lt;/li&gt;
&lt;li&gt;Kevin Powell sent people in all age brackets,
but his largest bracket (22%) was people over 60!
We love to see it.
His next bracket (18%) was under 20.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Clearly, I donâ€™t have a lot of answers here.
These correlations donâ€™t tell us much
without knowing how representative the data is.
Iâ€™m just not sure what Iâ€™m looking at,
or how it should be read.
But it concerns me that browsers use surveys like this
as a primary gauge of developer interest â€“
seemingly without asking whoâ€™s represented,
or who might be missing from the data.&lt;/p&gt;
&lt;p&gt;Did you respond to the survey?
What questions do you have around this data?
Or what interesting correlations have you found?
Let us know on
&lt;a href=&quot;https://front-end.social/@oddbird&quot;&gt;Mastodon&lt;/a&gt;
or &lt;a href=&quot;https://bsky.app/profile/oddbird.dev&quot;&gt;Bluesky&lt;/a&gt;.&lt;/p&gt;
</content>
    <category term='Article' />
    <category term='CSS' />
  </entry>
  <entry>
    <title>Choosing a Masonry Syntax in CSS</title>
    <link href="https://www.oddbird.net/2024/10/01/grid-masonry-nuance/"/>
    <updated>2024-10-01T00:00:00Z</updated>
    <id>https://www.oddbird.net/2024/10/01/grid-masonry-nuance/</id><author>
        <name>Miriam Suzanne</name>
        <uri>https://www.oddbird.net/authors/miriam/</uri>
      </author>
    <content type="html">&lt;img src=&quot;https://www.oddbird.net/assets/images/blog/2024/masonry-1600w.jpeg&quot; alt=&quot;A gallery of numbered images in four columns
&quot;/&gt;&lt;p&gt;Back in 2020, Firefox released a prototype for doing â€˜masonryâ€™ layout in CSS. Now all the browsers are eager to ship &lt;em&gt;something&lt;/em&gt;, but thereâ€™s a hot debate about the best syntax to use.&lt;/p&gt;
&lt;div data-callout=&quot;note&quot;&gt;&lt;strong&gt;Update &lt;time datetime=&quot;2024-10-23&quot;&gt;October 23, 2024&lt;/time&gt;:&lt;/strong&gt;&lt;div&gt;
&lt;p&gt;Since posting this article,
Safari has &lt;a href=&quot;https://webkit.org/blog/16026/css-masonry-syntax/&quot;&gt;responded to the debate&lt;/a&gt;
with (I think) a fairly strong set of arguments.
Iâ€™ve added &lt;a href=&quot;https://www.oddbird.net/feed.atom#looking-at-apple%E2%80%99s-latest-arguments-for-grid&quot;&gt;my thoughts below&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The Firefox prototype
and &lt;a href=&quot;https://drafts.csswg.org/css-grid-3/&quot;&gt;CSS Grid Level 3 specification&lt;/a&gt;
initially introduced a &lt;code&gt;masonry&lt;/code&gt; keyword
as part of CSS grid layout.
We can define a standard grid template on one axis,
set the cross-axis to &lt;code&gt;masonry&lt;/code&gt;,
and we get a â€˜waterfallâ€™ of content
divided somewhat evenly across our tracks â€“
aligned on one axis,
but packing more densely on the other.&lt;/p&gt;
&lt;p&gt;At its core,
a â€˜masonryâ€™ layout
works like â€˜gridâ€™ layout on one axis
and â€˜flexboxâ€™ on the other.
Jen Simmons â€“
then at Mozilla,
but now working for Apple â€“
developed a great demonstration
of both the new functionality
and several alternative techniques:&lt;/p&gt;
&lt;figure&gt;
  &lt;p class=&quot;codepen&quot; data-height=&quot;500&quot; data-slug-hash=&quot;QWjqbJj&quot; data-default-tab=&quot;result&quot; data-user=&quot;jensimmons&quot; data-embed-version=&quot;2&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/jensimmons/pen/QWjqbJj&quot;&gt;Masonry Layout Demo&lt;/a&gt; by &lt;a href=&quot;https://codepen.io/jensimmons&quot;&gt;@jensimmons&lt;/a&gt; on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
  &lt;figcaption&gt;
    This demo works on Safari Tech Preview,
    or Firefox with an experimental feature flag.
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Rachel Andrew â€“
then independent, but now at Google â€“
immediately
&lt;a href=&quot;https://rachelandrew.co.uk/archives/2020/05/05/does-masonry-belong-in-the-css-grid-specification/&quot;&gt;pushed back on the proposal&lt;/a&gt;,
suggesting that masonry and grid
are different enough
they should not be part of the same layout mode.
Since then, the debate has heated up
with conflicting proposals from Apple and Google:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Safari implemented the grid-masonry proposal,
and &lt;a href=&quot;https://webkit.org/blog/15269/help-us-invent-masonry-layouts-for-css-grid-level-3/&quot;&gt;wrote about the feature&lt;/a&gt;,
&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/10233&quot;&gt;asking for feedback in a CSSWG issue&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Chrome responded with an
&lt;a href=&quot;https://developer.chrome.com/blog/masonry&quot;&gt;alternative masonry proposal&lt;/a&gt;,
and opened an
&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/9041&quot;&gt;alternative issue on the CSSWG&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For better comparison,
two of the primary CSS spec authors â€“
Elika Etemad (Apple) and Tab Atkins-Bittner (Google) â€“
wrote a &lt;a href=&quot;https://www.w3.org/TR/css-grid-3/&quot;&gt;combined specification&lt;/a&gt;
with both proposals side by side
(and joined wherever possible).&lt;/li&gt;
&lt;li&gt;Chrome has since followed up
with &lt;a href=&quot;https://developer.chrome.com/blog/masonry-syntax&quot;&gt;further arguments&lt;/a&gt;
for a non-grid syntax.&lt;/li&gt;
&lt;li&gt;&lt;s&gt;I expect weâ€™ll see a reply from Apple soon?&lt;/s&gt;
(&lt;a href=&quot;https://webkit.org/blog/16026/css-masonry-syntax/&quot;&gt;The Apple response has arrived&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Based on the comment threads,
it seems like web authors also have opinions!&lt;/p&gt;
&lt;p&gt;At this point,
the proposals have nearly the same functionality
(with some caveats that Apple is hoping to address).
They accept roughly the same options,
and use almost the same layout algorithm.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* grid masonry */&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; grid&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;3&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 1fr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; masonry&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* non-grid masonry */&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; masonry&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;masonry-tracks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;3&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 1fr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;masonry-direction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; column&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think either one will work &lt;em&gt;just fine&lt;/em&gt;.
But letâ€™s look at the details!&lt;/p&gt;
&lt;div data-callout=&quot;Hot off the press&quot;&gt;&lt;strong&gt;Hot off the press:&lt;/strong&gt;&lt;div&gt;
&lt;p&gt;I was about to hit &lt;em&gt;publish&lt;/em&gt;
when Geoff Graham from CSS Tricks posted
a similar rundown:
&lt;a href=&quot;https://css-tricks.com/css-masonry-css-grid/&quot;&gt;CSS Masonry &amp;amp; CSS Grid&lt;/a&gt;.
I recommend checking it out!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;is-masonry-a-grid%3F&quot; tabindex=&quot;-1&quot;&gt;Is masonry a grid?&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;This is a common debate,
and I donâ€™t find it that useful.
Iâ€™m not here to protect
the pure platonic essence of â€˜grid-nessâ€™
being sullied by un-aligned rows.
There is &lt;em&gt;extensive&lt;/em&gt; overlap between
masonry and grid functionality.
The terminology can adapt to our needs.&lt;/p&gt;
&lt;p&gt;The most I can manage for this line of debate
is to say: web author mental models matter.
On that front itâ€™s clear that authors
(like spec editors)
see things very differently from each other.
Weâ€™re divided.&lt;/p&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;do-the-features-even-overlap%3F&quot; tabindex=&quot;-1&quot;&gt;Do the features even overlap?&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Ian Kilpatrick (Google)
&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/8195#issuecomment-1347260607&quot;&gt;raised some issues early on&lt;/a&gt;,
suggesting that even the overlapping parts
of grid and masonry
(defining the columns)
must have slightly different algorithms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The grid layout mechanic starts by assigning items to tracks,
and then adjusts the track sizing
based on item placement.&lt;/li&gt;
&lt;li&gt;The masonry mechanic works the other way,
first determining what tracks are available,
and then fitting items into those tracks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Itâ€™s clear that there has been a lot of effort since then
to bring the two approaches in line with each other.
The &lt;a href=&quot;https://drafts.csswg.org/css-grid-3/#track-sizing-performance&quot;&gt;current proposal&lt;/a&gt;
works by first placing â€˜hypotheticalâ€™ items
&lt;em&gt;in every position that the item could potentially occupy&lt;/em&gt; â€“
and then proceeding with normal grid track sizing,
before finally placing the actual items
in their actual positions.&lt;/p&gt;
&lt;p&gt;There may still be more to work out here,
but the goal seems to be
making both approaches &lt;em&gt;work the same&lt;/em&gt;.
That process should help reveal
any fatal flaws in either proposal,
and ensure our final choice
is based only on the fundamental differences.&lt;/p&gt;
&lt;p&gt;Itâ€™s worth letting that play out some
before we make decisions based purely on syntax.
Still, there are a lot more considerations
to keep in mind.&lt;/p&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;what-can-we-learn-or-teach-more-clearly%3F&quot; tabindex=&quot;-1&quot;&gt;What can we learn or teach more clearly?&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;When weâ€™re working on new features,
we hope they will be easy to teach and easy to learn.
Thatâ€™s essential if we want people to use the feature!
But it has some of the same issues
as the previous debate.
Who are we teaching,
what do they know already,
and how do they think about layout?&lt;/p&gt;
&lt;p&gt;The two proposals provide slightly different abstractions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We can imagine a grid,
where we define either columns or rows,
and then masonry-pack elements on the other axis.&lt;/li&gt;
&lt;li&gt;We can imagine a set of masonry tracks,
and then specify the direction that they pack.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are advantages to understanding one
unified track-layout system,
and giving it additional flexibility.
If you know how to use grids,
the masonry value becomes a smooth extension of that syntax.&lt;/p&gt;
&lt;p&gt;There are also advantages to a customized syntax,
specialized for a specific use-case.
If you donâ€™t know grids,
the alternative masonry layout mode
might provide a simpler entry point.
In either case,
we can (mostly) re-use the track-definition syntax.&lt;/p&gt;
&lt;p&gt;Unfortunately, both options result in
some properties that &lt;em&gt;look similar&lt;/em&gt; â€“
sharing names or syntax â€“
but have &lt;em&gt;subtly different rules&lt;/em&gt; in masonry.&lt;/p&gt;
&lt;p&gt;Still, I feel like I could learn or teach either one.&lt;/p&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;what-are-the-defaults%3F&quot; tabindex=&quot;-1&quot;&gt;What are the defaults?&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;To get from &lt;code&gt;display: grid&lt;/code&gt; to a basic masonry layout
requires us to set both
&lt;code&gt;columns&lt;/code&gt; and &lt;code&gt;rows&lt;/code&gt; â€“
one of them as the &lt;code&gt;masonry&lt;/code&gt; axis,
and the other with our desired tracks.
If we donâ€™t define multiple tracks,
weâ€™ll get a single masonry column by default.&lt;/p&gt;
&lt;p&gt;We could consider this a good small-screen default,
and then expect authors to add columns as needed.
But &lt;code&gt;display: masonry&lt;/code&gt; is a specialized layout mode,
so the defaults can reflect a more common
â€˜masonryâ€™ approach:
adding new tracks as the space becomes available.
In the proposed spec,
&lt;code&gt;masonry-template-tracks&lt;/code&gt; will have an initial value of
&lt;code&gt;repeat(auto-areas, auto)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Thereâ€™s a lot going on in that value.
The &lt;code&gt;repeat()&lt;/code&gt; function is borrowed from grid,
allowing us to take any number of columns
and duplicate them any number of times.
The first value is &lt;em&gt;how many times to repeat&lt;/em&gt;,
and the second value describes &lt;em&gt;the tracks to repeat&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Grid provides a few keywords for the repeat-count:
&lt;code&gt;auto-fit&lt;/code&gt; and &lt;code&gt;auto-fill&lt;/code&gt;.
Both create new tracks whenever space becomes available,
but &lt;code&gt;auto-fit&lt;/code&gt; caps the total number of tracks
based on the number of items in our grid
(and some other criteria) â€“
to avoid generating empty tracks.
The proposed &lt;code&gt;auto-areas&lt;/code&gt; would generate
zero or more tracks based first on
covering any explicit grid areas needed,
and then falling back to &lt;code&gt;auto-fill&lt;/code&gt;
(or &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/10854#issuecomment-2379810590&quot;&gt;maybe &lt;code&gt;auto-fit&lt;/code&gt;&lt;/a&gt;) behavior.
This might be useful in both masonry and non-masonry grids,
but is a good &lt;em&gt;default&lt;/em&gt; for masonry specifically.&lt;/p&gt;
&lt;p&gt;Grid doesnâ€™t currently allow auto-repeating tracks
that use an intrinsic size.
Having &lt;code&gt;auto&lt;/code&gt; in the second argument here
is a powerful new feature.
If this is possible to do in non-masonry tracks as well,
we should make it work everywhere.
But again: it only makes sense as the &lt;em&gt;default&lt;/em&gt;
in a masonry-specific layout.&lt;/p&gt;
&lt;p&gt;Even assuming these values will work
in both syntax options,
our simplest possible masonry layout
looks a bit different now:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* grid syntax */&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; grid&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;auto-areas&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; auto&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; masonry&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* non-grid syntax */&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; masonry&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The non-grid option is clearly simpler â€“
more can be &lt;em&gt;implied&lt;/em&gt;.
The grid option is not excessive,
just &lt;em&gt;explicit&lt;/em&gt;.
Both make sense,
but they represent different approaches moving forwardâ€¦&lt;/p&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;what-precedent-are-we-setting%3F&quot; tabindex=&quot;-1&quot;&gt;What precedent are we setting?&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;CSS doesnâ€™t add new layout modes all the time,
but we do on occasion,
and this is likely to come up again.
We could imagine a new layout system
that is grid-like on one axis,
but does &lt;em&gt;something else&lt;/em&gt; on the other axis.
I donâ€™t think this is far-fetched at all.
Columns are useful for alignment,
even when the page isnâ€™t a strict 2-axis grid.
See, for example, a decade of column-only web â€˜grid systemsâ€™.&lt;/p&gt;
&lt;p&gt;Or just consider masonry as a literal combination
of grid columns with flexbox rows:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* name TBD, maybe &#39;masonry&#39;? */&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; grid-columns-but-flex-rows&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* or, extending grid to contain other thingsâ€¦ */&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; grid&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The grid-integrated syntax maintains existing properties and values.
There is less â€˜newâ€™ syntax we need in the language â€“
just a single keyword opens up entirely new layout opportunities.
With a small syntax addition,
and a small impact on the overall footprint of CSS,
weâ€™ve opened up an entire range of grid-plus possibilities.
Even as we add new &lt;code&gt;grid-plus-*&lt;/code&gt; features down the road,
the &lt;em&gt;overall language&lt;/em&gt; remains streamlined.&lt;/p&gt;
&lt;p&gt;A new display mode, on the other hand, adds
a whole array of new properties to the language
for each additional extension â€“
some of them nearly-exact duplicates of existing grid properties.
Our new properties can re-use familiar syntax internally,
so itâ€™s not a &lt;em&gt;huge&lt;/em&gt; burden to re-learn,
but it does involve a lot of new property names
that could have been avoided.&lt;/p&gt;
&lt;p&gt;As a tradeoff, each of those properties is &lt;em&gt;specialized&lt;/em&gt; â€“
providing a new default for the new layout.
If we add more &lt;code&gt;grid-plus-*&lt;/code&gt; layout modes in the future,
the language will grow quickly,
but each layout mode can get specialized defaults
designed for the use-case in question.
Each &lt;em&gt;individual usage&lt;/em&gt; is streamlined.&lt;/p&gt;
&lt;p&gt;Both of those maintain one form of â€˜simplicityâ€™
at the expense of another.
One looks better in isolated demos,
but both are important for
&lt;em&gt;teachability of the language&lt;/em&gt;
as a unified system.&lt;/p&gt;
&lt;p&gt;Of course,
we wouldnâ€™t have to make the same decision every time.
Other things to consider case-by-case would beâ€¦&lt;/p&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;what%E2%80%99s-the-best-fallback-(or-responsive-alternate)%3F&quot; tabindex=&quot;-1&quot;&gt;Whatâ€™s the best fallback (or responsive alternate)?&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;There are several situations
when itâ€™s useful to switch between layout methods.
One of those is providing a &lt;em&gt;fallback&lt;/em&gt;
in browsers that donâ€™t support the new syntax,
and the other is providing an &lt;em&gt;alternative&lt;/em&gt;
under different conditions
(often a &lt;code&gt;@container&lt;/code&gt; or &lt;code&gt;@media&lt;/code&gt; query).&lt;/p&gt;
&lt;p&gt;Building masonry into grid
provides us with one very clear fallback path.
If we remove the new &lt;code&gt;masonry&lt;/code&gt; keyword,
we get the same basic grid,
with all the cells aligned on both axis.
You can see this fallback option
in &lt;a href=&quot;https://codepen.io/jensimmons/pen/QWjqbJj&quot;&gt;Jen Simmonsâ€™ demo&lt;/a&gt;
embedded above.
Itâ€™s not perfect,
thereâ€™s too much space,
but itâ€™s pretty decent for a fallback.&lt;/p&gt;
&lt;p&gt;Jen provides some
flexbox-based alternatives in her demo,
and Chris Coyier has
a 2020 article documenting other
&lt;a href=&quot;https://css-tricks.com/piecing-together-approaches-for-a-css-masonry-layout/&quot;&gt;Approaches for a CSS Masonry Layout&lt;/a&gt;.
Many of them rely on either
JavaScript, flexbox, or multi-column layouts.&lt;/p&gt;
&lt;p&gt;I find most of those alternatives unconvincing.
Some people have suggested that masonry is
â€˜closer to flexbox than gridâ€™
because of the dense item-packing.
Itâ€™s an argument that sounds compelling to me
on the surface,
but after trying various options,
I havenâ€™t actually seen a flexbox fallback
that would work for me as a basis for enhancement.
Maybe that just comes down to personal taste.&lt;/p&gt;
&lt;p&gt;If we do want a flexbox or multi-column fallback,
the grid-based proposal requires a bit more work
to get there.
Since the &lt;code&gt;grid&lt;/code&gt; display mode isnâ€™t going to fail entirely,
we need to override it using &lt;code&gt;@supports&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* grid fallbackâ€¦ just leave it */&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;.grid-fallback&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; grid&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;auto-fit&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;minmax&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;200px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 1fr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; masonry&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* flex fallback, additional definition */&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;.flex-fallback&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;flex-wrap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; wrap&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;/* maybe other things? */&lt;/span&gt;

  &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@supports&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; masonry&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; grid&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;auto-fit&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;minmax&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;200px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 1fr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; masonry&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Iâ€™m not sure why we would want that fallback, exactly.
Flexbox rows are all vertically aligned,
just like our default grid rows â€“
so thereâ€™s no clear advantage that I see.
But I can imagine situations where we want
a flexbox variant at some other screen size,
to create a different effect?&lt;/p&gt;
&lt;p&gt;An alternate &lt;code&gt;masonry&lt;/code&gt; display mode
would fall back to &lt;code&gt;block&lt;/code&gt; display by default.
To get any other fallback (grid, flex, or multi-column)
we would have to specify both layouts completely.
For a grid fallback
with columns that match our masonry layout,
that would mean duplicating the track definitions:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* grid fallbackâ€¦ duplicate properties */&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;.grid-fallback&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; grid&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;auto-fit&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;minmax&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;200px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 1fr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; masonry&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;masonry-template-tracks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;auto-fit&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;minmax&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;200px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 1fr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could put those track definitions inside a variable if we want,
but it still requires explicit duplication.&lt;/p&gt;
&lt;p&gt;Because we can rely on various properties working
in only one layout mode,
and we get a simple mode toggle,
itâ€™s fairly simple to set up any fallback we want.
But the trade off is that we donâ€™t have
the the most obvious fallback &lt;em&gt;built in&lt;/em&gt; from the start.&lt;/p&gt;
&lt;p&gt;While I was experimenting with different fallback paths,
I was trying to maintain the spirit of masonry in some way â€“
tightly packed columns â€“
with as little effort as possible.
My favorite solution was the default fallback
provided by grid-integrated masonry,
with the addition of rough aspect-ratio attributes when possible â€“
e.g. &lt;code&gt;is-short&lt;/code&gt; and &lt;code&gt;is-tall&lt;/code&gt;.
All items span multiple rows,
but short items span fewer rows,
and tall items span more rows.&lt;/p&gt;
&lt;figure&gt;
  &lt;p class=&quot;codepen&quot; data-height=&quot;500&quot; data-slug-hash=&quot;wvVKvrN&quot; data-default-tab=&quot;result&quot; data-user=&quot;miriamsuzanne&quot; data-embed-version=&quot;2&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/miriamsuzanne/pen/wvVKvrN&quot;&gt;Rough Puff Masonry&lt;/a&gt; by &lt;a href=&quot;https://codepen.io/miriamsuzanne&quot;&gt;@miriamsuzanne&lt;/a&gt; on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
  &lt;figcaption&gt;
    I borrowed the markup and images
    from Jen Simmons,
    and I&#39;m pretty happy with the result.
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Itâ€™s not a perfect solution,
but I was surprised how well it works.
This is a damn good fallback story in my mind.
Of course, &lt;em&gt;effort&lt;/em&gt; here is hard to measure.
If we know the size of each item,
and have access to the markup,
then this is pretty straight-forward.
But those are big &lt;em&gt;ifs&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;On my personal site,
&lt;a href=&quot;https://www.miriamsuzanne.com/2023/12/31/23-24/&quot;&gt;image galleries&lt;/a&gt;
fit this description.
Maybe Iâ€™ll start using this approach.&lt;/p&gt;
&lt;p&gt;Itâ€™s also fair to say that fallbacks
become less essential over time.
Looking further down the road,
we might also want to considerâ€¦&lt;/p&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;what-corners-are-we-painting-ourselves-into%3F&quot; tabindex=&quot;-1&quot;&gt;What corners are we painting ourselves into?&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Frankly, itâ€™s hard to know.
But this is one of the questions
that the Chrome team keeps bringing up.
If we attach masonry to grid now,
they can never diverge in the future.
Every future addition to grid
will need to take masonry into account.&lt;/p&gt;
&lt;p&gt;While I can see features
that might build on a masonry precedent,
I donâ€™t actually have a clear picture of what
might &lt;em&gt;conflict&lt;/em&gt; with masonry-in-grid down the road.
I donâ€™t see obvious issues
that are likely to come up â€“
but Chrome is right that it could
theoretically become an issue.&lt;/p&gt;
&lt;p&gt;How much do we worry about that now?
I donâ€™t know.&lt;/p&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;what%E2%80%99s-next%3F&quot; tabindex=&quot;-1&quot;&gt;Whatâ€™s next?&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Join the conversation!
There are several threads
where developers can leave feedback:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;on the &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/10233&quot;&gt;original proposal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;or the &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/9041&quot;&gt;alternate syntax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Itâ€™s most helpful to talk about your own use-cases,
and how you expect to use this feature
(if you do).
I avoid arguments about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The meaning of the word â€˜gridâ€™.
CSS column-only layouts
have been called â€˜gridsâ€™
since I started building websites
in the early 2000s â€“
and there are still use-cases for &lt;code&gt;display:grid&lt;/code&gt;
that focus entirely on one axis.&lt;/li&gt;
&lt;li&gt;Masonry being frivolous, as a layout.
I get it.
What we call &lt;em&gt;the Pinterest layout&lt;/em&gt; (derogatory)
has often been overused, or poorly used,
and not always accessible.
But there are many other use cases
for &lt;em&gt;flowing items into columns without aligning rows&lt;/em&gt;,
and we shouldnâ€™t lose sight of that.
This is going to be a powerful tool when it ships,
so itâ€™s worth spending some time to consider
how we want it to work.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I imagine Apple will also post something soon,
to clarify and expand on their position.
Iâ€™m interested to see what they say.
I also think Google might release a prototype soon,
which would allow us to compare real code.&lt;/p&gt;
&lt;p&gt;For my part,
Iâ€™m not particularly invested in one outcome or the other.
I think both proposals are &lt;em&gt;pretty good&lt;/em&gt;,
and this conversation has already pushed both
to be better than they were initially.
So Iâ€™m rooting for the process!&lt;/p&gt;
&lt;p&gt;Ask the questions!
Push the language to be better!
Have fun out there, building the web.&lt;/p&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;looking-at-apple%E2%80%99s-latest-arguments-for-grid&quot; tabindex=&quot;-1&quot;&gt;Looking at Appleâ€™s latest arguments for grid&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Added on &lt;time datetime=&quot;2024-10-23&quot;&gt;October 23, 2024&lt;/time&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In their &lt;a href=&quot;https://webkit.org/blog/16026/css-masonry-syntax/&quot;&gt;response posted Oct 21, 2024&lt;/a&gt;,
Apple developers make several arguments
in favor of the grid-integrated syntax.
Itâ€™s a long article,
and covers a lot of points weâ€™ve already discussed,
but a few ideas stand out to me.&lt;/p&gt;
&lt;p&gt;They provide use-cases to show where the grid fallback is preferable,
but also how a current masonry-like solution (similar to mine)
could be progressively enhanced in much the same way as &lt;code&gt;subgrid&lt;/code&gt;.
That feeds into their argument that,
while defaults are nice,
most layouts will require more detail â€“
and often that detail is where we get overlap with grids.
So the simplest cases might be a line or two shorter
with a non-grid approach,
but realistic use-cases are likely to duplicate the work.&lt;/p&gt;
&lt;p&gt;Taking that even further,
they call into question how useful it is
to have &lt;code&gt;auto&lt;/code&gt; as a repeating value in masonry layouts.
This caught me off guard â€“
up above I say it sounds useful â€“
but I think Apple is right to question that.
Thereâ€™s a fundamental lack of information
if we ask the browser to figure out how many columns fit,
&lt;em&gt;and also how big those columns should be&lt;/em&gt;,
without providing more detail about what to prioritize.
Just because the browser can give us &lt;em&gt;something&lt;/em&gt; in this case,
doesnâ€™t mean the result will ever be a useful default.&lt;/p&gt;
&lt;p&gt;They also provide more specific examples
of &lt;a href=&quot;https://www.oddbird.net/feed.atom#what-precedent-are-we-setting%3F&quot;&gt;another &lt;code&gt;grid-plus-*&lt;/code&gt;&lt;/a&gt;
layout that authors would find useful:
grid columns, with â€˜normal flowâ€™ rows.
Thatâ€™s a feature that I would be very excited to see.
I donâ€™t know if their proposed syntax will work,
but I agree that it should &lt;em&gt;also&lt;/em&gt;
re-use existing properties wherever possible,
rather than being treated as a distinct layout method.&lt;/p&gt;
&lt;p&gt;At this point, Iâ€™m fairly well convinced
that the grid solution is a better path forward â€“
though Iâ€™m still not sure what
â€˜future conflictsâ€™ Google is concerned about.&lt;/p&gt;
&lt;h3&gt;Are we really calling this â€˜masonryâ€™?&lt;/h3&gt;
&lt;p&gt;At the end of the article,
there is a suggestion that we re-think the name of this feature.
The only real argument for â€˜masonryâ€™
is a popular tool with the same name â€“
and a metaphor thatâ€™s not particularly precise.&lt;/p&gt;
&lt;p&gt;I agree, but donâ€™t love their proposed &lt;code&gt;collapse&lt;/code&gt; or &lt;code&gt;pack&lt;/code&gt; values.
Do you have better ideas?
Let us know on
&lt;a href=&quot;https://front-end.social/@mia/113234445766222639&quot;&gt;Mastodon&lt;/a&gt;
or &lt;a href=&quot;https://bsky.app/profile/miriam.codes/post/3l5iajyldyk22&quot;&gt;Bluesky&lt;/a&gt;!&lt;/p&gt;
</content>
    <category term='Article' />
    <category term='CSS' />
    <category term='CSSWG' />
    <category term='Masonry' />
    <category term='Grids' />
  </entry>
  <entry>
    <title>Sass Color Spaces &amp; Wide Gamut Colors</title>
    <link href="https://www.oddbird.net/2024/09/19/sass-color/"/>
    <updated>2024-09-19T00:00:00Z</updated>
    <id>https://www.oddbird.net/2024/09/19/sass-color/</id><author>
        <name>Miriam Suzanne</name>
        <uri>https://www.oddbird.net/authors/miriam/</uri>
      </author>
    <content type="html">&lt;img src=&quot;https://www.oddbird.net/assets/images/blog/2022/sass-color-1600w.jpeg&quot; alt=&quot;Sass logo in black
on top of bright oklch color gradient
&quot;/&gt;&lt;p&gt;CSS has a range of new color functions that support wider color gamuts (like &lt;code&gt;display-p3&lt;/code&gt;) and perceptually uniform color adjustments (like &lt;code&gt;oklch&lt;/code&gt;). Sass now provides additional tools for working with these new color formats, and converting between them.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://sass-lang.com/blog/wide-gamut-colors-in-sass/&quot;  &gt;Read the full article Â»&lt;/a&gt;&lt;/p&gt;&lt;p&gt;If you want to learn more about CSS color spaces
and the tradeoff they provide,
or if youâ€™re just interested in the new Sass functionality,
Iâ€™ve written about it
&lt;a href=&quot;https://sass-lang.com/blog/wide-gamut-colors-in-sass/&quot;&gt;on the Sass Blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some of the highlights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sass colors have a â€˜spaceâ€™ that they are defined in.
We can inspect that using &lt;code&gt;color.space()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A colorâ€™s space doesnâ€™t change unless we explicitly convert between spaces
using &lt;code&gt;color.to-space()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Out-of-gamut channels are also preserved
unless we explicitly adjust a color into a specific gamut
using &lt;code&gt;color.to-gamut()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Color manipulation and inspection functions
like &lt;code&gt;color.adjust()&lt;/code&gt; or &lt;code&gt;color.channel()&lt;/code&gt;
accept a &lt;code&gt;$space&lt;/code&gt; parameter for making adjustments or inspecting
in an arbitrary color space.&lt;/li&gt;
&lt;/ul&gt;
</content>
    <category term='Link' />
    <category term='CSS' />
    <category term='Sass' />
    <category term='Color' />
  </entry>
  <entry>
    <title>Learn CSS Grid - Part 2</title>
    <link href="https://www.oddbird.net/2024/09/17/winging-it-12/"/>
    <updated>2024-09-17T00:00:00Z</updated>
    <id>https://www.oddbird.net/2024/09/17/winging-it-12/</id><author>
        <name>Miriam Suzanne</name>
        <uri>https://www.oddbird.net/authors/miriam/</uri>
      </author>
    <author>
        <name>Stacy Kvernmo</name>
        <uri>https://www.oddbird.net/authors/stacy/</uri>
      </author>
    <content type="html">&lt;img src=&quot;https://www.oddbird.net/assets/images/winging-it/winging-it-12-1600w.jpeg&quot; alt=&quot;&quot;/&gt;&lt;p&gt;&lt;a href=&quot;https://www.oddbird.net/2024/07/23/winging-it-10/&quot;&gt;In July we talked with Stephanie Eckles&lt;/a&gt;
about how (and why)
you can get started working grids
into your CSS toolkit.
As requested,
this is part two of our dive into CSS grids.
We address your questions about strategy â€“
demoing how we plan and apply grid layouts,
starting with a design
and implementing in the browser.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.oddbird.net/2024/07/23/winging-it-10/&quot;&gt;Winging It Ep 10: Learn CSS Grid First&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Winging It Ep 12: Learn CSS Grid - Part 2 (this episode)&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;embed&quot;&gt;
      &lt;div class=&quot;gallery&quot;&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p class=&quot;main-action&quot;&gt;&lt;a href=&quot;http://www.youtube.com/channel/UCUkHxN78y9On9YH1zd-aTGw?sub_confirmation=1&quot;&gt;Subscribe to Channel Â»&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;what-we-cover%3A&quot; tabindex=&quot;-1&quot;&gt;What we cover:&lt;/h2&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;How we plan our grids when reviewing a design&lt;/li&gt;
&lt;li&gt;Working with the &lt;code&gt;grid-template&lt;/code&gt; shorthand property&lt;/li&gt;
&lt;li&gt;Making decisions about how content flows and stacks at different sizes&lt;/li&gt;
&lt;li&gt;Working with &lt;code&gt;gap&lt;/code&gt; and empty grid cells&lt;/li&gt;
&lt;li&gt;Rapid prototyping with rough markup&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;demos%3A&quot; tabindex=&quot;-1&quot;&gt;Demos:&lt;/h2&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.figma.com/design/RHLs3YJE40ZAT7LiZaTQu3/Grid?node-id=2-21&amp;amp;node-type=frame&amp;amp;t=rLrO9i6kCAw1C1Ee-0&quot;&gt;CSS Grid Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://codepen.io/stacy/pen/ZEddQOz&quot;&gt;CSS Grid from Scratch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    <category term='Winging It' />
    <category term='Show Notes' />
    <category term='Video' />
    <category term='CSS' />
    <category term='Grids' />
    <category term='Layout' />
  </entry>
  <entry>
    <title>Web Components</title>
    <link href="https://www.oddbird.net/2024/08/27/winging-it-11/"/>
    <updated>2024-08-27T00:00:00Z</updated>
    <id>https://www.oddbird.net/2024/08/27/winging-it-11/</id><author>
        <name>Miriam Suzanne</name>
        <uri>https://www.oddbird.net/authors/miriam/</uri>
      </author>
    <author>
        <name>James Stuckey Weber</name>
        <uri>https://www.oddbird.net/authors/james/</uri>
      </author>
    <content type="html">&lt;img src=&quot;https://www.oddbird.net/assets/images/winging-it/winging-it-11-1600w.jpeg&quot; alt=&quot;&quot;/&gt;&lt;p&gt;Web Components are a polarizing feature
that seem simultaneously old news
and not quite ready for production yet.
But weâ€™ve been making things with Web Components,
and finding some areas where they really work well.
Join us,
along with special guest &lt;a href=&quot;https://www.zachleat.com/&quot;&gt;Zach Leatherman&lt;/a&gt;
of &lt;a href=&quot;https://www.11ty.dev/&quot;&gt;11ty&lt;/a&gt;,
to hear more about how weâ€™re using them,
what they work well for,
and why weâ€™re excited about them.&lt;/p&gt;
&lt;figure class=&quot;embed&quot;&gt;
      &lt;div class=&quot;gallery&quot;&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p class=&quot;main-action&quot;&gt;&lt;a href=&quot;http://www.youtube.com/channel/UCUkHxN78y9On9YH1zd-aTGw?sub_confirmation=1&quot;&gt;Subscribe to Channel Â»&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;what-we-cover%3A&quot; tabindex=&quot;-1&quot;&gt;What we cover:&lt;/h2&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;When Web Components â€œclickedâ€&lt;/li&gt;
&lt;li&gt;How to incorporate progressive enhancement&lt;/li&gt;
&lt;li&gt;Future Web Components projects&lt;/li&gt;
&lt;li&gt;What is still missing from Web Components?&lt;/li&gt;
&lt;li&gt;Thoughts on &lt;a href=&quot;https://lit.dev/&quot;&gt;Lit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;demos%3A&quot; tabindex=&quot;-1&quot;&gt;Demos:&lt;/h2&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/oddbird/slide-deck/&quot;&gt;slide-deck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mirisuzanne/ground-control&quot;&gt;ground-control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/11ty/is-land&quot;&gt;is-land&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zachleat/fundraising-status&quot;&gt;fundraising-status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zachleat.com/web/a-taxonomy-of-web-component-types/&quot;&gt;An Attempted Taxonomy of Web Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://demo-webc-image-compare.netlify.app/&quot;&gt;Progressive Enhancement Recipes using Eleventy WebC Image Comparison Components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;links%3A&quot; tabindex=&quot;-1&quot;&gt;Links:&lt;/h2&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zachleat.com/&quot;&gt;Zach Leatherman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zachleat.com/web/independent-sustainable-11ty/&quot;&gt;I Need Your Help to Make 11ty Fully Independent and Sustainable in 2024&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.11ty.dev/&quot;&gt;Eleventy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://discord.com/channels/767813449048260658/767813449048260661/1275219476429930619&quot;&gt;Web Components Discord&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    <category term='Winging It' />
    <category term='Show Notes' />
    <category term='Video' />
    <category term='Web Components' />
  </entry>
  <entry>
    <title>Speeding Up Your Sass Compilation in Vite and Webpack</title>
    <link href="https://www.oddbird.net/2024/08/14/sass-compiler/"/>
    <updated>2024-08-14T00:00:00Z</updated>
    <id>https://www.oddbird.net/2024/08/14/sass-compiler/</id><author>
        <name>James Stuckey Weber</name>
        <uri>https://www.oddbird.net/authors/james/</uri>
      </author>
    <content type="html">&lt;img src=&quot;https://www.oddbird.net/assets/images/blog/2024/sass-compiler-1600w.jpeg&quot; alt=&quot;Three roller bladers in racing gear competing, with a blurred background.
&quot;/&gt;&lt;p&gt;Sass compilation can be a speed bottleneck in your build, but it doesnâ€™t have to be anymore.&lt;/p&gt;
&lt;p&gt;Vite comes with built in support for Sass, as well as other CSS preprocessors.
Just &lt;code&gt;npm install sass&lt;/code&gt;, import a &lt;code&gt;.scss&lt;/code&gt; file, and it works.&lt;/p&gt;
&lt;p&gt;However, this came with a catch. For every Sass import, a new instance of Sass
would spin up, compile, and spin down. If you have a single imported Sass entry
point file that imports other Sass files, this isnâ€™t a big deal. But if youâ€™re
using Vueâ€™s &lt;a href=&quot;https://vuejs.org/guide/scaling-up/sfc.html&quot;&gt;Single File
Components&lt;/a&gt; (SFCs) with
&lt;code&gt;lang=&amp;quot;scss&amp;quot;&lt;/code&gt;, you were spinning
up a new Sass instance for every single SFC.&lt;/p&gt;
&lt;p&gt;That can add up.&lt;/p&gt;
&lt;p&gt;Earlier this year, OddBird helped Sass add a new &lt;a href=&quot;https://sass-lang.com/documentation/js-api/classes/compiler/&quot;&gt;&lt;code&gt;Compiler&lt;/code&gt; API&lt;/a&gt; that allows you
to reuse a single instance of Sass for multiple compilations. While you can
adopt the new API in your own bespoke Sass compilation setup, we were excited to
see the Vite team add support in version 5.4.0.&lt;/p&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;how-to-enable-the-sass-compiler-api-in-vite&quot; tabindex=&quot;-1&quot;&gt;How to enable the Sass Compiler API in Vite&lt;/h2&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;Update to Vite version 5.4.0 or above.&lt;/li&gt;
&lt;li&gt;Switch from &lt;code&gt;sass&lt;/code&gt; to &lt;code&gt;sass-embedded&lt;/code&gt; by running &lt;code&gt;npm uninstall sass; npm install -D sass-embedded&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;div data-callout=&quot;note&quot;&gt;&lt;div&gt;
&lt;p&gt;&lt;strong&gt;Wait â€“ whatâ€™s &lt;code&gt;sass-embedded&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sass is written in Dart. The &lt;code&gt;sass&lt;/code&gt; package is transpiled to pure-Javascript,
and &lt;code&gt;sass-embedded&lt;/code&gt; exposes the same API, but around a native Dart executable.
In many situations, &lt;code&gt;sass-embedded&lt;/code&gt; is faster.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;In your &lt;code&gt;vite.config.js&lt;/code&gt; file, set &lt;code&gt;css.preprocessorOptions.scss.api&lt;/code&gt; to &lt;code&gt;modern-compiler&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;token literal-property property&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;preprocessorOptions&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;scss&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;modern-compiler&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div data-callout=&quot;note&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;div&gt;
&lt;p&gt;If youâ€™re using the indented syntax, youâ€™ll need to use the &lt;code&gt;sass&lt;/code&gt; key
instead of &lt;code&gt;scss&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Adjust any options from the &lt;a href=&quot;https://sass-lang.com/documentation/js-api/interfaces/legacystringoptions/&quot;&gt;&lt;code&gt;legacy&lt;/code&gt;&lt;/a&gt; API options to the &lt;a href=&quot;https://sass-lang.com/documentation/js-api/interfaces/stringoptions/&quot;&gt;&lt;code&gt;modern&lt;/code&gt;&lt;/a&gt; API
options. In my case, I needed to update &lt;code&gt;pkgImporter&lt;/code&gt; to &lt;code&gt;importers: [new NodePackageImporter()]&lt;/code&gt; and change the import of &lt;code&gt;NodePackageImporter&lt;/code&gt; from
&lt;code&gt;sass&lt;/code&gt; to &lt;code&gt;sass-embedded&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And youâ€™re done. Now your Vite compilation time should be even faster!&lt;/p&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;how-to-enable-the-sass-compiler-api-in-webpack&quot; tabindex=&quot;-1&quot;&gt;How to enable the Sass Compiler API in Webpack&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Webpackâ€™s &lt;code&gt;sass-loader&lt;/code&gt; also has support for the Compiler API.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Update to sass-loader version 14.2.0 or above.&lt;/li&gt;
&lt;li&gt;Switch from &lt;code&gt;sass&lt;/code&gt; to &lt;code&gt;sass-embedded&lt;/code&gt; by running &lt;code&gt;npm uninstall sass; npm install -D sass-embedded&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In your &lt;code&gt;webpack.config.js&lt;/code&gt;, set the &lt;code&gt;options.api&lt;/code&gt; to &lt;code&gt;modern-compiler&lt;/code&gt; for
the &lt;code&gt;sass-loader&lt;/code&gt; rule.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sass-loader&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;modern-compiler&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;benefits&quot; tabindex=&quot;-1&quot;&gt;Benefits&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;The benefit here is going to be very project-dependent. In our codebases,
we saw &lt;code&gt;vite build&lt;/code&gt; times improving from ~4.7s to ~3.9s in a smaller project,
and from ~5.9s to ~3.8s in a larger project.
&lt;a href=&quot;https://github.com/vitejs/vite/pull/17728#issuecomment-2247572134&quot;&gt;Others&lt;/a&gt; have
seen up to an 8x speed improvement. Incremental dev builds should also be
faster.&lt;/p&gt;
&lt;p&gt;Let us know what kind of speed improvements you see in your projects!&lt;/p&gt;
</content>
    <category term='Article' />
    <category term='Sass' />
    <category term='Build Tools' />
  </entry>
  <entry>
    <title>Partial Feature Queries, Relaxed Layout Containment, and More</title>
    <link href="https://www.oddbird.net/2024/08/13/csswg-08/"/>
    <updated>2024-08-13T00:00:00Z</updated>
    <id>https://www.oddbird.net/2024/08/13/csswg-08/</id><author>
        <name>Miriam Suzanne</name>
        <uri>https://www.oddbird.net/authors/miriam/</uri>
      </author>
    <content type="html">&lt;img src=&quot;https://www.oddbird.net/assets/images/projects/w3c-960w.jpeg&quot; alt=&quot;&quot;/&gt;&lt;p&gt;Over the last month, the CSS Working Group has determined we can loosen containment restrictions for query containers, and agreed on a syntax for special-case support queries (like support for the gap property in a flex context, or support for align-content in a block flow context).&lt;/p&gt;
&lt;p&gt;For more, you can access
&lt;a href=&quot;https://www.w3.org/Search/Mail/Public/search?keywords=minutes&amp;amp;hdr-1-name=subject&amp;amp;hdr-1-query=&amp;amp;index-grp=Public_FULL&amp;amp;index-type=t&amp;amp;type-index=www-style&quot;&gt;CSS Working Group meeting minutes&lt;/a&gt;
on the W3C mailing list archive.
Thatâ€™s also a good place to see
the &lt;a href=&quot;https://www.w3.org/Search/Mail/Public/search?keywords=agenda&amp;amp;hdr-1-name=subject&amp;amp;hdr-1-query=&amp;amp;index-grp=Public_FULL&amp;amp;index-type=t&amp;amp;type-index=www-style&quot;&gt;agenda for upcoming meetings&lt;/a&gt;.
Regular meetings happen every Wednesday,
with the agenda generally sent one day in advance.
This post highlights updates from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://lists.w3.org/Archives/Public/www-style/2024Jul/0003.html&quot;&gt;2024-07-10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lists.w3.org/Archives/Public/www-style/2024Jul/0006.html&quot;&gt;2024-07-17&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lists.w3.org/Archives/Public/www-style/2024Jul/0010.html&quot;&gt;2024-07-24&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lists.w3.org/Archives/Public/www-style/2024Aug/0000.html&quot;&gt;2024-07-31&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div data-callout=&quot;note&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;div&gt;
&lt;p&gt;This is part of a series
providing updates around my work
on the CSS Working Group.&lt;/p&gt;
&lt;p&gt;These contributions take a lot of time and effort.
If youâ€™re interested in supporting
our open-source CSS work,
consider becoming a &lt;a href=&quot;https://github.com/sponsors/oddbird&quot;&gt;GitHub sponsor&lt;/a&gt;,
or contributing to our
&lt;a href=&quot;https://opencollective.com/oddbird-open-source&quot;&gt;Open Collective&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;container-queries-%26-conditional-rules&quot; tabindex=&quot;-1&quot;&gt;Container queries &amp;amp; conditional rules&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Container Queries have officially moved
out of the CSS Containment Module, and into
&lt;a href=&quot;https://www.w3.org/TR/css-conditional-5/&quot;&gt;CSS Conditional Rules Module (Level 5)&lt;/a&gt;.
This is &lt;a href=&quot;https://www.w3.org/TR/css-conditional-3/&quot;&gt;the same specification module&lt;/a&gt;
that defines the &lt;code&gt;@media&lt;/code&gt; and &lt;code&gt;@supports&lt;/code&gt; rules.&lt;/p&gt;
&lt;p&gt;Both levels 4 and 5 are currently written as â€˜diff specsâ€™ â€“
only showing changes from the previous level,
rather than the entire specification.
&lt;a href=&quot;https://www.w3.org/TR/css-conditional-4/&quot;&gt;Level 4&lt;/a&gt;
defined the &lt;code&gt;@supports selector()&lt;/code&gt; selector-support feature query,
and is already a
&lt;a href=&quot;https://www.w3.org/Style/2011/CSS-process#rectrack&quot;&gt;Candidate Recommendation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote data-quote=&quot;solo&quot;&gt;&lt;div style=&quot;&quot; data-media=&quot;quote&quot;&gt;
    &lt;div class=&quot;media-image&quot;&gt;&lt;svg data-icon=&quot;quote&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; aria-hidden=&quot;true&quot; focusable=&quot;false&quot; width=&quot;20px&quot; height=&quot;20px&quot; viewBox=&quot;0 0 98 98&quot;&gt;
  &lt;path d=&quot;M90.46,22.37C78.38,31.05,73.22,39.87,73.22,47c0,7.75,5.42,11.81,14.32,12.59,0,8.32-5.22,13.94-13.94,13.94-9.68,0-15.29-7.17-15.29-18.2C58.31,42,67.13,28,85.31,16a49,49,0,1,0,5.15,6.33ZM43.59,59.63c0,8.32-5.22,13.94-13.94,13.94-9.68,0-15.29-7.17-15.29-18.2,0-13.75,9.1-28.08,28.46-40.28l4.65,6.59c-12.78,8.9-18.2,18-18.2,25.36C29.27,54.79,34.49,58.85,43.59,59.63Z&quot; transform=&quot;translate(-1 -1)&quot;&gt;&lt;/path&gt;
&lt;/svg&gt;
&lt;/div&gt;
    &lt;div class=&quot;media-content&quot;&gt;&lt;p&gt;By publishing a Candidate Recommendation,
a working group is expressing
that it considers the specification complete
and that it has resolved all known issues.&lt;/p&gt;
&lt;p class=&quot;byline h-card&quot;&gt;---&lt;a href=&quot;https://www.w3.org/Style/2011/CSS-process#rectrack&quot; class=&quot;p-name&quot;&gt;The CSS Standardization Process&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Itâ€™s a bit strange to me
that it would still be treated as a â€˜diffâ€™,
with the generic
&lt;a href=&quot;https://www.w3.org/TR/css-conditional/&quot;&gt;&lt;code&gt;/css-conditional/&lt;/code&gt;&lt;/a&gt; url
still pointing at level 3 â€“
but these things happen.
The spec process is not always simple and linear.&lt;/p&gt;
&lt;p&gt;Just to make this web of CSS modules
even more confusing:
media queries also have a distinct
&lt;a href=&quot;https://www.w3.org/TR/mediaqueries/&quot;&gt;Media Queries&lt;/a&gt; module.
That module defines what media features can be queried,
while the Conditional Rules module
only defines the at-rule we use inside CSS stylesheets.&lt;/p&gt;
&lt;h3&gt;A new preference-query API&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/mediaqueries-5/&quot;&gt;Media Queries Module Level 5&lt;/a&gt;
defines a number of
&lt;a href=&quot;https://www.w3.org/TR/mediaqueries-5/#mf-user-preferences&quot;&gt;user preference media features&lt;/a&gt;,
which have been around for a while now:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;prefers-reduced-motion&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prefers-reduced-transparency&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prefers-reduced-data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prefers-contrast&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prefers-color-scheme&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forced-colors&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of those queries is not like the others,
and you can tell the difference from the name.
The &lt;code&gt;forced-colors&lt;/code&gt; setting
is the only one &lt;em&gt;enforced&lt;/em&gt; by browsers â€“
all the others are &lt;em&gt;ignorable&lt;/em&gt;.
If we (as authors) never query the user preference
for â€˜reduced motionâ€™,
it will have no effect on our site.&lt;/p&gt;
&lt;p&gt;Users can generally change these preferences
at either the operating system level,
or inside their browser â€“
depending on the OS, browser, and setting in question.
But at this point,
thereâ€™s no way for users to change their preference
&lt;em&gt;for a specific website&lt;/em&gt;,
and save that change across multiple visits.
We can work around that
by individually providing (for example) light/dark toggles,
and then saving the choice
to local storage or a cookie.
But returning visitors will still see
a &lt;a href=&quot;https://css-tricks.com/flash-of-inaccurate-color-theme-fart/&quot;&gt;flash of their global preference&lt;/a&gt;
on page-load,
before our JavaScript kicks in.&lt;/p&gt;
&lt;p&gt;Wouldnâ€™t it be nice
to have a way for users
to change their preference site-by-site,
and have browsers remember their preference?
Thatâ€™s what the proposed
&lt;a href=&quot;https://github.com/WICG/web-preferences-api&quot;&gt;Web Preferences API&lt;/a&gt;
would do.
This proposal gives us access
to update a domain-specific setting
for any &lt;code&gt;prefers-*&lt;/code&gt; query, for any user,
and have the browser remember that setting
when they return.&lt;/p&gt;
&lt;p&gt;That proposal has been underway for some time,
but last month it was
&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/6517#issuecomment-2220975121&quot;&gt;adopted by the CSS Working Group&lt;/a&gt;,
and will be added to
&lt;a href=&quot;https://www.w3.org/TR/mediaqueries-5/&quot;&gt;Media Queries Module Level 5&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Relaxed layout containment for size queries&lt;/h3&gt;
&lt;p&gt;Part of the reason
for moving Container Queries
out of the Containment spec
is a drive to relax the relationship
between these features.
Containment is essential for
making size queries possible â€“
but the existing breakdown of containment types
defined for the &lt;code&gt;contain&lt;/code&gt; property
is not a perfect match for what we need.&lt;/p&gt;
&lt;p&gt;Our initial specification
relied on applying &lt;code&gt;size&lt;/code&gt; (or &lt;code&gt;inline-size&lt;/code&gt;),
&lt;code&gt;layout&lt;/code&gt;, and &lt;code&gt;style&lt;/code&gt; containment
to all size-query containers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Size containment ensures
that the size of child elements
canâ€™t be used for sizing the parent element.&lt;/li&gt;
&lt;li&gt;Layout containment ensures
that child elements
can only participate in the contained layout,
and are not able to impact layouts
higher up in the DOM tree.&lt;/li&gt;
&lt;li&gt;Style containment ensures
that things like CSS counters
that increment inside a container
canâ€™t change the value of a counter
outside the container.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All three of those are necessary precautions
to avoid looping behavior,
where changes inside a query could impact
the results of the query.
However, over time weâ€™ve found
that &lt;em&gt;only some&lt;/em&gt; &lt;code&gt;style&lt;/code&gt; and &lt;code&gt;layout&lt;/code&gt; containments
are strictly required.
If we donâ€™t need as many restrictions
on a container,
we should remove the ones that arenâ€™t necessary.&lt;/p&gt;
&lt;p&gt;Back in March we resolved that
&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/10040#issuecomment-2009840674&quot;&gt;anchor names are not blocked by &lt;code&gt;style&lt;/code&gt; or &lt;code&gt;layout&lt;/code&gt; containment&lt;/a&gt;.
I immediately opened an issue
pointing out that this situation is
&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/10102&quot;&gt;not specific to anchor positioning&lt;/a&gt;,
and we should consider allowing all positioned elements
to escape &lt;code&gt;layout&lt;/code&gt; containment â€“
and therefore escape containers.
Ian Kilpatrick (a Blink engineer)
followed up by proposing we
&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/10544&quot;&gt;no longer apply full &lt;code&gt;layout&lt;/code&gt; containment to query-containers&lt;/a&gt;,
and only apply an &lt;a href=&quot;https://drafts.csswg.org/css-display/#independent-formatting-context&quot;&gt;independent formatting context&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Two weeks ago,
presumably as a celebration of my birthday,
the Working Group
&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/10544#issuecomment-2248438355&quot;&gt;resolved to make this change&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Moving forward,
that means it still wonâ€™t be possible
to use &lt;code&gt;subgrid&lt;/code&gt; across a container boundary,
but it will be possible to do things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;baseline&lt;/code&gt; alignment across containers&lt;/li&gt;
&lt;li&gt;Allow &lt;code&gt;absolute&lt;/code&gt; and &lt;code&gt;fixed&lt;/code&gt; positioned elements
to escape their container&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope we can continue to
relax the impacts of containment on container queries over time.
At this point, we might not see major changes
to existing features â€“
but we might find more situations like anchor position
where a new feature should not strictly
follow containment rules
applied by query containers.&lt;/p&gt;
&lt;h3&gt;Querying partial feature support&lt;/h3&gt;
&lt;p&gt;Thereâ€™s been a long-standing issue
with how to handle &lt;code&gt;@support&lt;/code&gt; queries
for features that may be partly implemented
in one or more browser.
The most notable case was
browsers extending the &lt;code&gt;gap&lt;/code&gt; property
from being grid-specific (2017)
to being supported in flexbox as well.&lt;/p&gt;
&lt;p&gt;Firefox implemented that change late in 2018,
Chrome/Edge rolled it out in mid-2020,
but Safari didnâ€™t add flexbox gap support
until early 2021.
For several years,
all the browsers were reporting support
for the &lt;code&gt;gap&lt;/code&gt; property,
but only one browser had &lt;em&gt;full support&lt;/em&gt;
in all the relevant layout modes.&lt;/p&gt;
&lt;p&gt;This is the result of an essential design principle
of the &lt;code&gt;@supports&lt;/code&gt; rule:
&lt;em&gt;browsers should not have to maintain a list
of supported features&lt;/em&gt;.
Thatâ€™s been attempted in the past,
but the lists would be to long to maintain well,
and quickly get out of date.
Instead, when a browser parser encounters the &lt;code&gt;@supports&lt;/code&gt; rule,
it tries to parse the contents of the query:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the query can be parsed as valid CSS,
then the result is &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If the parser doesnâ€™t recognize the query content as valid CSS,
then the result is &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If the query syntax itself is invalid,
the result is &lt;code&gt;unknown&lt;/code&gt;
(Iâ€™ve written about &lt;a href=&quot;https://www.oddbird.net/2021/05/14/support-unknown/&quot;&gt;unknown support&lt;/a&gt; before)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can query for &lt;code&gt;@supports (gap: 1em)&lt;/code&gt;,
and any browser that understands &lt;code&gt;gap: 1em&lt;/code&gt;
as a valid CSS declaration will claim support.
But thereâ€™s no way to check
&lt;em&gt;that the declaration does what we want in all cases&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This situation has come up again recently,
with browsers adding support for
&lt;a href=&quot;https://css-irl.info/how-do-you-vertically-centre-an-element-in-css/&quot;&gt;box alignment in block&lt;/a&gt;
and &lt;a href=&quot;https://wpt.fyi/results/css/css-align/abspos?label=master&amp;amp;label=experimental&amp;amp;aligned&quot;&gt;absolute positioning&lt;/a&gt;
contexts.
As Michelle Barker mentions in her post:&lt;/p&gt;
&lt;blockquote data-quote=&quot;solo&quot;&gt;&lt;div style=&quot;&quot; data-media=&quot;quote&quot;&gt;
    &lt;div class=&quot;media-image&quot;&gt;&lt;svg data-icon=&quot;quote&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; aria-hidden=&quot;true&quot; focusable=&quot;false&quot; width=&quot;20px&quot; height=&quot;20px&quot; viewBox=&quot;0 0 98 98&quot;&gt;
  &lt;path d=&quot;M90.46,22.37C78.38,31.05,73.22,39.87,73.22,47c0,7.75,5.42,11.81,14.32,12.59,0,8.32-5.22,13.94-13.94,13.94-9.68,0-15.29-7.17-15.29-18.2C58.31,42,67.13,28,85.31,16a49,49,0,1,0,5.15,6.33ZM43.59,59.63c0,8.32-5.22,13.94-13.94,13.94-9.68,0-15.29-7.17-15.29-18.2,0-13.75,9.1-28.08,28.46-40.28l4.65,6.59c-12.78,8.9-18.2,18-18.2,25.36C29.27,54.79,34.49,58.85,43.59,59.63Z&quot; transform=&quot;translate(-1 -1)&quot;&gt;&lt;/path&gt;
&lt;/svg&gt;
&lt;/div&gt;
    &lt;div class=&quot;media-content&quot;&gt;&lt;p&gt;One thing that concerns me,
is that this seems to fall into that tricky area
where it becomes impossible to test for browser support
and provide fallbacks using a feature query â€“
much like &lt;code&gt;gap&lt;/code&gt; when it was implemented for flexbox.
As &lt;code&gt;align-content&lt;/code&gt; is well-supported for Grid and flexbox,
the feature query doesnâ€™t help us here.&lt;/p&gt;
&lt;p class=&quot;byline h-card&quot;&gt;---&lt;span class=&quot;p-name&quot;&gt;Michelle Barker&lt;/span&gt;, &lt;a href=&quot;https://css-irl.info/how-do-you-vertically-centre-an-element-in-css/&quot; class=&quot;p-org h-card p-name&quot;&gt;CSS { In Real Life }&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Back in January,
browsers agreed to
&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/3559#issuecomment-1885332213&quot;&gt;maintain a short list of these situations&lt;/a&gt;,
and provide named queries
in specific cases.
To make this work,
it has to be a tool we resort to &lt;em&gt;rarely&lt;/em&gt;,
in a way that is &lt;em&gt;coordinated&lt;/em&gt;
across all the major browser engines.&lt;/p&gt;
&lt;p&gt;The recent update here
is that weâ€™ve &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/9875#issuecomment-2233725405&quot;&gt;agreed on a syntax&lt;/a&gt; â€“
&lt;code&gt;@supports named-feature(&amp;lt;keyword&amp;gt;)&lt;/code&gt; â€“
and our first feature keyword:
&lt;code&gt;align-content-on-display-block&lt;/code&gt;.
Once browsers implement this,
you will be able to test:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@supports&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;align-content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; center&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;/* browsers that support align-content ANYWHERE */&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@supports&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;named-feature&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;align-content-on-display-block&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;/* only browsers that support align-content in block layout */&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;what%E2%80%99s-up-with-css-masonry%3F&quot; tabindex=&quot;-1&quot;&gt;Whatâ€™s up with CSS masonry?&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;If you skim through the minutes
from our July meetings you will also find
a number of updates
related to the CSS â€˜masonryâ€™ proposals.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://webkit.org/blog/15269/help-us-invent-masonry-layouts-for-css-grid-level-3/&quot;&gt;WebKit&lt;/a&gt;
and
&lt;a href=&quot;https://developer.chrome.com/blog/masonry&quot;&gt;Chrome&lt;/a&gt;
have two competing visions
for how masonry layout
ought to work in CSS.
WebKit wants masonry to be part of grid layout,
and Chrome wants to keep them distinct.
The former leads to grid properties
that behave slightly different in different situations,
while the latter means duplicating
a number of properties that would otherwise be identical.&lt;/p&gt;
&lt;p&gt;I donâ€™t have strong feelings about this,
or strong use-cases for masonry â€“
but for a second there, it seemed like a hot debate.
Both teams posted the competing proposals,
people ran surveys on social media
to get developer feedback,
and thenâ€¦ nothing.&lt;/p&gt;
&lt;p&gt;So whatâ€™s happening?&lt;/p&gt;
&lt;p&gt;You might remember,
a similar thing happened last year
with two different proposals for anchor positioning.
Rather than choosing one or the other,
there was an attempt to merge
the best of both.
That took some time,
but the resulting feature
is much more powerful and usable
than either of the initial proposals.
The work paid off.&lt;/p&gt;
&lt;p&gt;In this case,
we canâ€™t fully &lt;em&gt;have it both ways&lt;/em&gt;.
Masonry will either be part of grid layout,
or it will have to be separate.
But in many ways,
weâ€™re taking the same approach:
Chrome is opening issues
to show where their masonry might
conflict with existing grid features,
and WebKit is looking for ways
to minimize those conflicts.
Depending how those conflicts are resolved,
weâ€™ll have a much better sense
if the masonry-in-grid approach is viable or not.&lt;/p&gt;
&lt;p&gt;And then we will (hopefully)
not be debating how the feature &lt;em&gt;works&lt;/em&gt;,
but only how it is â€˜spelledâ€™ in CSS syntax.
Maybe kicking that can down the road
will give us more information to work with.&lt;/p&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;also-keep-an-eye-on%E2%80%A6&quot; tabindex=&quot;-1&quot;&gt;Also keep an eye onâ€¦&lt;/h2&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/10618&quot;&gt;Issue #10618&lt;/a&gt;:
The &lt;code&gt;calc-size()&lt;/code&gt; function
and &lt;code&gt;interpolate-size&lt;/code&gt; property
will finally allow us to
transition or animate to and from &lt;code&gt;auto&lt;/code&gt; sizes!
I donâ€™t have much more to say
about this specific issue,
but Iâ€™m keeping a close eye
on the overall feature.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/8320&quot;&gt;Issue #8320&lt;/a&gt;:
One of the big frustrations
with view transitions
is the need to name every element involved.
While thereâ€™s no resolution here yet,
thereâ€™s a lot of effort going into
solving this problem.&lt;/li&gt;
&lt;/ul&gt;
</content>
    <category term='Article' />
    <category term='CSS' />
    <category term='CSSWG' />
    <category term='Open Source' />
    <category term='Container Queries' />
    <category term='Layout' />
  </entry>
  <entry>
    <title>Learn CSS Grid First</title>
    <link href="https://www.oddbird.net/2024/07/23/winging-it-10/"/>
    <updated>2024-07-23T00:00:00Z</updated>
    <id>https://www.oddbird.net/2024/07/23/winging-it-10/</id><author>
        <name>Miriam Suzanne</name>
        <uri>https://www.oddbird.net/authors/miriam/</uri>
      </author>
    <author>
        <name>Stacy Kvernmo</name>
        <uri>https://www.oddbird.net/authors/stacy/</uri>
      </author>
    <content type="html">&lt;img src=&quot;https://www.oddbird.net/assets/images/winging-it/winging-it-10-1600w.jpeg&quot; alt=&quot;&quot;/&gt;&lt;p&gt;We talk with Stephanie Eckles
â€“ the brain behind &lt;a href=&quot;https://moderncss.dev/&quot;&gt;ModernCSS.dev&lt;/a&gt; and &lt;a href=&quot;https://smolcss.dev/&quot;&gt;SmolCSS.dev&lt;/a&gt;
â€“ about CSS grids.
We look at a few of the most common grid patterns,
to show you how (and why)
you can get started
working grids into your CSS toolkit!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Winging It Ep 10: Learn CSS Grid First (this episode)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.oddbird.net/2024/09/17/winging-it-12/&quot;&gt;Winging It Ep 12: Learn CSS Grid - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;embed&quot;&gt;
      &lt;div class=&quot;gallery&quot;&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p class=&quot;main-action&quot;&gt;&lt;a href=&quot;http://www.youtube.com/channel/UCUkHxN78y9On9YH1zd-aTGw?sub_confirmation=1&quot;&gt;Subscribe to Channel Â»&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;what-we-cover%3A&quot; tabindex=&quot;-1&quot;&gt;What we cover:&lt;/h2&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Is flexbox alone good enough?&lt;/li&gt;
&lt;li&gt;When do you use grid vs flexbox?&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://codepen.io/stacy/pen/ObmjeZ&quot;&gt;CSS Grid Terminology&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Different grid techniques:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Implicit grid to add spacing and alignment&lt;/li&gt;
&lt;li&gt;Auto-repeating grids for gallery layouts&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto-fit&lt;/code&gt; vs. &lt;code&gt;auto-fill&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Grid areas for overlapping content&lt;/li&gt;
&lt;li&gt;Named lines&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minmax()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Single-area grids vs. absolute positioning&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;links%3A&quot; tabindex=&quot;-1&quot;&gt;Links:&lt;/h2&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ishadeed.com/article/css-grid-area/&quot;&gt;CSS Grid Areas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://moderncss.dev/3-css-grid-techniques-to-make-you-a-grid-convert/&quot;&gt;3 CSS Grid Techniques to Make You a Grid Convert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://codepen.io/collection/DQvYpQ&quot;&gt;CSS Grid Experiments&lt;/a&gt; by Olivia Ng&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;anchor-link-wrapper&quot;&gt;
&lt;h2 id=&quot;demos%3A&quot; tabindex=&quot;-1&quot;&gt;Demos:&lt;/h2&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://codepen.io/miriamsuzanne/pen/OJGVzbK&quot;&gt;Quick Layout with CSS Grid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://codepen.io/miriamsuzanne/pen/wvKErbK&quot;&gt;Mix and match functions/intrinsic sizes for all the squish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://codepen.io/miriamsuzanne/pen/jRdgLB&quot;&gt;Subgrid Use Case&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    <category term='Winging It' />
    <category term='Show Notes' />
    <category term='Video' />
    <category term='CSS' />
    <category term='Grids' />
    <category term='Layout' />
  </entry>
  </feed>