<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0">
<channel>
<title>
<![CDATA[ Adam Argyle ]]>
</title>
<description>
<![CDATA[ RSS Feed for Adam Argyle: Web design & development tips & tricks: CSS, JS, HTML, Design, & UX. ]]>
</description>
<link>https://nerdy.dev</link>
<image>
<url>https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/rss-icon.png</url>
<title>Adam Argyle</title>
<link>https://nerdy.dev</link>
</image>
<generator>RSS for Node</generator>
<lastBuildDate>Mon, 03 Feb 2025 00:32:10 GMT</lastBuildDate>
<atom:link href="https://nerdy.dev/rss.xml" rel="self" type="application/rss+xml"/>
<copyright>
<![CDATA[ 2025 Adam Argyle ]]>
</copyright>
<language>
<![CDATA[ en ]]>
</language>
<webMaster>
<![CDATA[ adam.is@nerdy.dev (Adam Argyle) ]]>
</webMaster>
<ttl>60</ttl>
<category>
<![CDATA[ CSS ]]>
</category>
<category>
<![CDATA[ HTML ]]>
</category>
<category>
<![CDATA[ JavaScript ]]>
</category>
<category>
<![CDATA[ Front-End ]]>
</category>
<category>
<![CDATA[ Design ]]>
</category>
<icon>https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/rss-icon.png</icon>
<logo>https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/skull-card.png</logo>
<item>
<title>
<![CDATA[ New Footer Went Big ]]>
</title>
<description>
<![CDATA[ <p>New <code>&lt;footer&gt;</code>,<br> Went big.</p> ]]>
</description>
<link>https://nerdy.dev/new-footer-went-big?utm_source=rss</link>
<guid isPermaLink="true">https://nerdy.dev/new-footer-went-big?utm_source=rss</guid>
<category>
<![CDATA[ note ]]>
</category>
<dc:creator>
<![CDATA[ Web Master@admin ]]>
</dc:creator>
<pubDate>Mon, 03 Feb 2025 00:23:21 GMT</pubDate>
</item>
<item>
<title>
<![CDATA[ New 404 Page ]]>
</title>
<description>
<![CDATA[ <p>New <a href="/the-404-page">404 page</a>:</p> <ul> <li>glitchtastic</li> <li><a href="https://chromewebstore.google.com/detail/visbug/cdockenadnadldjbbgcallicgledbeoc">VisBug</a> loaded so you can <br><strong>edit</strong> or <strong>destroy</strong> the page</li> </ul> ]]>
</description>
<link>https://nerdy.dev/new-404-page?utm_source=rss</link>
<guid isPermaLink="true">https://nerdy.dev/new-404-page?utm_source=rss</guid>
<category>
<![CDATA[ note ]]>
</category>
<dc:creator>
<![CDATA[ Web Master@admin ]]>
</dc:creator>
<pubDate>Tue, 28 Jan 2025 00:23:21 GMT</pubDate>
</item>
<item>
<title>
<![CDATA[ Bad At CSS With Lane Wagner ]]>
</title>
<description>
<![CDATA[ <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/bad-at-css-logo.png" alt="Bad at CSS logo" height="426" width="1122" /> <p><span class="Tag">Ep #14</span><br>üéôÔ∏è <strong>Bad At CSS Podcast</strong></p> <p>Backend dev <a href="https://x.com/wagslane">Lane Wagner</a>, of <a href="https://www.boot.dev/">boot.dev</a> and host of <a href="https://www.backendbanter.fm/">Backend Banter FM</a>, guests this week sharing <strong>what do backend dev think of CSS.</strong></p> <p>‚§∑ <a href="https://badatcss.com">badatcss.com</a> ¬∑ <a href="https://www.youtube.com/watch?v=UgBUlaMaM28">youtube</a> ¬∑ <a href="https://open.spotify.com/episode/6KY19rcsp783fXDrdsiCxK">spotify</a></p> ]]>
</description>
<link>https://nerdy.dev/bad-at-css-with-lane-wagner?utm_source=rss</link>
<guid isPermaLink="true">https://nerdy.dev/bad-at-css-with-lane-wagner?utm_source=rss</guid>
<category>
<![CDATA[ note ]]>
</category>
<category>
<![CDATA[ css ]]>
</category>
<category>
<![CDATA[ shows ]]>
</category>
<dc:creator>
<![CDATA[ adam.is.bad@css ]]>
</dc:creator>
<pubDate>Tue, 21 Jan 2025 16:42:48 GMT</pubDate>
<enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/bad-at-css-logo.png" length="0" type="image/png"/>
<media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/bad-at-css-logo.png"/>
</item>
<item>
<title>
<![CDATA[ 6 CSS Snippets Every Front-End Developer Should Know In 2025 ]]>
</title>
<description>
<![CDATA[ <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/6-css-snippets-2025-thumb.png" alt="Text emphasized alt text example" height="525" width="1019" /> <script type="module"> import "https://cdn.jsdelivr.net/npm/baseline-status"; </script> <p>2025; I think every front-end developer should know how to enable <a href="#view-transitions-for-web-pages">page transitions</a>, transition a <a href="#transition-a-dialog"><code>&lt;dialog&gt;</code></a>, <a href="#transition-a-popover">popover</a>, and <a href="#transition-animation-for-%3Cdetails%3E"><code>&lt;details&gt;</code></a>, animate light n&#39; dark <a href="#animated-adaptive-gradient-text">gradient text</a>, <a href="#typed-custom-properties">type safe their CSS</a> system, and <a href="#springy-easing-with-%3Ccode%3Elinear()%3C/code%3E">add springy easing</a> to animation.</p> <p><strong>AI is not going to give you this CSS.</strong></p> <p>This post is a theme continuation; checkout previous years <a href="https://web.dev/articles/6-css-snippets-every-front-end-developer-should-know-in-2023">2023</a> and <a href="https://web.dev/articles/5-css-snippets-every-front-end-developer-should-know-in-2024">2024</a> where I shared snippets for those years.</p> <p>This year, the snippets are bigger, more powerful, and leverage progressive enhancement a bit more; to help us step up to the <strong>vast UI/UX requirements of 2025</strong>.</p> <h2> Springy easing with <code>linear()</code> <a name="springy-easing-with-<code>linear()</code>" href="#springy-easing-with-<code>linear()</code>">#</a> </h2> <p><baseline-status featureId="linear-easing"></baseline-status></p> <p>Sprinkle life into animations with natural looking spring and bounce easings using <code>linear()</code>.</p> <p><video src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/css-2025-linear.mp4 width="1916" height="1080" alt="" preload="none" poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/so_0.5,f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/css-2025-linear.jpg" controls loop muted playsinline allowFullScreen /></p> <p>Using a series of linear lines to make &quot;curves&quot;, you can create surprisingly realistic visual physics. <strong>A small amount can go a long way</strong> to adding <a href="https://codepen.io/argyleink/pen/PoxgOZz">interest and intrigue</a> to the user experience.</p> <p>In the following video, the top animation uses <code>ease-out</code> and the bottom uses <code>linear()</code>, and I think the results are quite different, the bottom being more desirable.</p> <p><video src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/linear-easing-compared.mp4 width="1280" height="962" alt="" preload="none" poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/so_0.5,f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/linear-easing-compared.jpg" controls loop muted playsinline allowFullScreen /></p> <p>Here&#39;s some typical <code>linear()</code> easing CSS üòÖ:</p> <pre><code class="language-css"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-token-function)">.springy</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> transition</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> transform 1</span><span style="color:var(--shiki-token-keyword)">s</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> linear(</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> 0</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> 0.009</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> 0.035 2.1</span><span style="color:var(--shiki-token-keyword)">%</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> 0.141</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> 0.281 6.7</span><span style="color:var(--shiki-token-keyword)">%</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> 0.723 12.9</span><span style="color:var(--shiki-token-keyword)">%</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> 0.938 16.7</span><span style="color:var(--shiki-token-keyword)">%</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> 1.017</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> 1.077</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> 1.121</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> 1.149 24.3</span><span style="color:var(--shiki-token-keyword)">%</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> 1.159</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> 1.163</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> 1.161</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> 1.154 29.9</span><span style="color:var(--shiki-token-keyword)">%</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> 1.129 32.8</span><span style="color:var(--shiki-token-keyword)">%</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> 1.051 39.6</span><span style="color:var(--shiki-token-keyword)">%</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> 1.017 43.1</span><span style="color:var(--shiki-token-keyword)">%</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> 0.991</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> 0.977 51</span><span style="color:var(--shiki-token-keyword)">%</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> 0.974 53.8</span><span style="color:var(--shiki-token-keyword)">%</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> 0.975 57.1</span><span style="color:var(--shiki-token-keyword)">%</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> 0.997 69.8</span><span style="color:var(--shiki-token-keyword)">%</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> 1.003 76.9</span><span style="color:var(--shiki-token-keyword)">%</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> 1.004 83.8</span><span style="color:var(--shiki-token-keyword)">%</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> 1</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> );</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span></code></pre> </code></pre> <p><small>Yes‚Ä¶ that&#39;s what your formatter will do to it, as if it&#39;s helpful in some way lol.</small></p> <p>The <code>linear()</code> code above is not very human readable, but the machines love it. No frets, there&#39;s a few generators out there:</p> <ul> <li><a href="https://linear-easing-generator.netlify.app">https://linear-easing-generator.netlify.app</a></li> <li><a href="https://easingwizard.com">https://easingwizard.com</a></li> </ul> <q class="tip"> <p><strong>Tip!</strong><br>Expect longer durations when using <code>linear()</code>. When things run long, it can be nice to make them seamlessly interruptible, making <code>linear()</code> a great fit for <a href="https://developer.mozilla.org/docs/Web/CSS/transition">transitions</a> and potentially troublesome as keyframes.</p> </q> <p>You could alternatively use premade CSS variables from a library like <a href="https://open-props.style/#easing">Open Props</a>:</p> <pre><code class="language-css"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-token-keyword)">@import</span><span style="color:var(--shiki-token-string-expression)"> "https://unpkg.com/open-props/easings.min.css"</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-function)">.springy</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> @</span><span style="color:var(--shiki-token-constant)">media</span><span style="color:var(--shiki-foreground)"> (</span><span style="color:var(--shiki-token-constant)">prefers-reduced-motion</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> no-preference</span><span style="color:var(--shiki-foreground)">) {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> transition</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> transform 1</span><span style="color:var(--shiki-token-keyword)">s</span><span style="color:var(--shiki-token-function)"> var</span><span style="color:var(--shiki-token-constant)">(--ease-spring-3)</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span></code></pre> </code></pre> <p>Easy CSS to read, comes with 5 strengths for common effects:</p> <figure> <p><video src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/css-2025-linear-op.mp4 width="1198" height="422" alt="" preload="none" poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/so_0.5,f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/css-2025-linear-op.jpg" controls loop muted playsinline allowFullScreen /></p> <figcaption> <p><a href="https://codepen.io/argyleink/pen/ZEXQovz">Try it</a></p> </figcaption> </figure> <q class="notebook"> <p><a href="/notebook/open-props-springs.html">Try the <strong>Open Props Springs</strong> notebook!</a></p> </q> <h3> Incrementally adopt <a name="incrementally-adopt" href="#incrementally-adopt">#</a> </h3> <p>This one is super easy to toss in today.</p> <p>Easiest way, use the cascade (if you&#39;re into that):</p> <pre><code class="language-css"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-token-keyword)">@media</span><span style="color:var(--shiki-foreground)"> (prefers-reduced-motion</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-foreground)"> no-preference) {</span></span> <span class="line"><span style="color:var(--shiki-token-comment)"> /* just repeat the shorthand with adjusted easing */</span></span> <span class="line"><span style="color:var(--shiki-token-function)"> .thingy</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> transition</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> transform 0.3</span><span style="color:var(--shiki-token-keyword)">s</span><span style="color:var(--shiki-token-constant)"> ease</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> transition</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> transform 0.3</span><span style="color:var(--shiki-token-keyword)">s</span><span style="color:var(--shiki-token-constant)"> linear(‚Ä¶</span><span style="color:var(--shiki-foreground)">);</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-comment)"> /* or, target a specific property */</span></span> <span class="line"><span style="color:var(--shiki-token-function)"> .thingy</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> animation-timing-function</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-function)"> var</span><span style="color:var(--shiki-token-constant)">(--ease-1)</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> animation-timing-function</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-function)"> var</span><span style="color:var(--shiki-token-constant)">(--ease-spring-2)</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span></code></pre> </code></pre> <p><strong>If it knows, it knows.</strong></p> <p>Or, test for it first and scalpel apply the upgrade:</p> <pre><code class="language-css"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-token-function)">.thingy</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> transition</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> transform 0.3</span><span style="color:var(--shiki-token-keyword)">s</span><span style="color:var(--shiki-token-constant)"> ease</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-foreground)"> @</span><span style="color:var(--shiki-token-constant)">supports</span><span style="color:var(--shiki-foreground)"> (</span><span style="color:var(--shiki-token-constant)">transition-timing-function</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> linear(0</span><span style="color:var(--shiki-token-punctuation)">,</span><span style="color:var(--shiki-token-constant)"> 0.1</span><span style="color:var(--shiki-token-punctuation)">,</span><span style="color:var(--shiki-token-constant)"> 1</span><span style="color:var(--shiki-foreground)">)) {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> transition-timing-function</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-function)"> var</span><span style="color:var(--shiki-token-constant)">(--ease-spring-2)</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span></code></pre> </code></pre> <h2> Typed custom properties <a name="typed-custom-properties" href="#typed-custom-properties">#</a> </h2> <p><baseline-status featureId="registered-custom-properties"></baseline-status></p> <p>Similar to JS variables defined with <code>var</code>, CSS variables defined with <code>--</code> are global, loose, dynamic and flexible. This is great.</p> <p>But‚Ä¶ there are times, <strong>like when building a system</strong>, that you want to limit what goes into variables so a system can run with a reasonable amount of reliability.</p> <figure> <p><video src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/css-2025-typed-property.mp4 width="1920" height="1080" alt="" preload="none" poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/so_0.5,f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/css-2025-typed-property.jpg" controls loop muted playsinline allowFullScreen /></p> <figcaption> <p><a href="https://codepen.io/argyleink/pen/qBwKmNe">Try it</a></p> </figcaption> </figure> <p>In the above video, a variable is set to an invalid color. At first, this breaks the system. But, <a href="https://web.dev/blog/at-property-baseline"><code>@property</code></a> is added, the system remained functioning with the latest known valid color value.</p> <p>Create a typed <code>&lt;color&gt;</code> CSS variable like this:</p> <pre><code class="language-css"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-token-keyword)">@property</span><span style="color:var(--shiki-foreground)"> --color-1 {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> syntax: "&#x3C;color</span><span style="color:var(--shiki-token-keyword)">></span><span style="color:var(--shiki-foreground)">";</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> inherits: false;</span></span> <span class="line"><span style="color:var(--shiki-token-string-expression)"> initial-value</span><span style="color:var(--shiki-foreground)">: rebeccapurple;</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span></code></pre> </code></pre> <p>In addition to type safety, <code>@property</code> defined variables can also be animated because the browser can infer the steps needed to interpolate the value change based on the assigned type.</p> <p>Before <code>@property</code>, the browser couldn‚Äôt derive a type and discover interpolation steps, it was too complicated. Now, you give the browser a hint, and it&#39;s simple.</p> <p>In 2025, y&#39;all front-end devs should be getting familiar with defining variables with <code>@property</code> because it:</p> <ol> <li>Formalizes CSS system interfaces</li> <li>Protects CSS systems</li> <li>Enables new animation powers</li> <li>Can <a href="https://web.dev/blog/at-property-performance">perform better</a> when using <code>inherits: false</code></li> </ol> <details class="resources"> <summary>Resources</summary> <ul> <li><a href="https://codepen.io/argyleink/pen/vYPdBOO">https://codepen.io/argyleink/pen/vYPdBOO</a></li> <li><a href="https://www.youtube.com/watch?v=tSfSY3Ni3X0&amp;t=3409s">https://www.youtube.com/watch?v=tSfSY3Ni3X0&amp;t=3409s</a></li> <li><a href="https://nerdy.dev/cant-break-this-design-system">https://nerdy.dev/cant-break-this-design-system</a></li> <li><a href="https://nerdy.dev/type-guarded-css-systems-with-@property">https://nerdy.dev/type-guarded-css-systems-with-@property</a></li> <li><a href="https://www.epicweb.dev/talks/lightning-in-a-bottle-with-css-custom-properties">https://www.epicweb.dev/talks/lightning-in-a-bottle-with-css-custom-properties</a></li> <li><a href="https://codepen.io/argyleink/pen/MWZMxNN">https://codepen.io/argyleink/pen/MWZMxNN</a></li> </ul> </details> <h2> View transitions for page navigation <a name="view-transitions-for-page-navigation" href="#view-transitions-for-page-navigation">#</a> </h2> <p><baseline-status featureId="cross-document-view-transitions"></baseline-status></p> <p>Y&#39;all should know how to crossfade pages when links are clicked with this tiny view transitions snippet:</p> <pre><code class="language-css"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-token-keyword)">@view-transition</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> navigation: auto;</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span></code></pre> </code></pre> <figure> <p><video src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/css-2025-vt.mp4 width="1920" height="1092" alt="" preload="none" poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/so_0.5,f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/css-2025-vt.jpg" controls loop muted playsinline allowFullScreen /></p> <figcaption> <p><a href="https://codepen.io/argyleink/project/full/DezgjV">Try it</a></p> </figcaption> </figure> <p><strong>This is the easiest snippet to add to your site, with no downsides.</strong></p> <p>It signals your website would like to use page transitions when links are clicked, and the default transition is a crossfade.</p> <p>If the browser doesn&#39;t support it, it continues as it always has; but if it does support it then you dab the page with some special sauce.</p> <p>There&#39;s plenty more customization you can do, like <a href="https://codepen.io/argyleink/project/editor/ZBnpqB">full page animations</a>. But the gist of this section is just to share that easy snippet and the way the feature can be progressively enhanced.</p> <h3> Incrementally adopt <a name="incrementally-adopt" href="#incrementally-adopt">#</a> </h3> <p>There&#39;s many more opportunities to add additional animations with the page transition.</p> <p>A great place to start enhancing this page transition experience is to identify elements commonly found across pages, and give them a <code>name</code>:</p> <pre><code class="language-css"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-token-function)">.nav</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> view-transition-name</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> --nav</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-function)">.sidenav</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> view-transition-name</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> --sidenav</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span></code></pre> </code></pre> <p><strong>This includes elements in the page transition.</strong></p> <p>They can even be different elements.</p> <pre><code class="language-css"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-token-string-expression)">a</span><span style="color:var(--shiki-token-punctuation)">,</span><span style="color:var(--shiki-token-string-expression)"> h1</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> view-transition-name</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> --morphy</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span></code></pre> </code></pre> <p>By giving an <code>&lt;a&gt;</code> and an <code>&lt;h1&gt;</code> the same <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/view-transition-name"><code>view-transition-name</code></a> on two different pages, the browser will move and resize the page 1 element to the location and size of the page 2 element, making it look like a morph. You can of course morph between the same elements also.</p> <figure> <p><video src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/css-2025-vt-morphy.mp4 width="1920" height="1092" alt="" preload="none" poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/so_0.5,f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/css-2025-vt-morphy.jpg" controls loop muted playsinline allowFullScreen /></p> <figcaption> <p><a href="https://codepen.io/argyleink/project/full/AbvgrM">Try it</a></p> </figcaption> </figure> <p>There is so much more. Continue giving elements names and studying the <a href="https://view-transitions.chrome.dev/">rad examples by Bramus</a>, and you can create experiences with motion like this:</p> <figure> <p><video src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/css-2025-vt-rad.mp4 width="1920" height="1092" alt="" preload="none" poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/so_0.5,f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/css-2025-vt-rad.jpg" controls loop muted playsinline allowFullScreen /></p> <figcaption> <p><a href="https://view-transitions.chrome.dev/off-the-beaten-path/mpa/">Try it</a></p> </figcaption> </figure> <p>I love the <a href="https://developer.chrome.com/docs/devtools/css/animations">DevTools for Animations</a>, scrubbing that full page view transition is very satisfying, and excellent for really inspecting and improving the little details.</p> <details class="resources"> <summary>Resources</summary> <ul> <li><a href="https://www.youtube.com/watch?v=eY6C_-aDdTo">Multi-page application View Transitions are here</a></li> <li><a href="https://www.youtube.com/watch?v=oXSFwix7eR8">Modern CSS for Sites Workshop</a></li> <li><a href="https://www.youtube.com/watch?v=xBEvOh9jlis">The CSS Podcast - #89 on View Transitions</a></li> <li><a href="https://codepen.io/argyleink/project/editor/ZBnpqB">Full page transitions starter</a></li> <li><a href="https://github.com/bramus/ie-page-transitions">Bramus with a kit for IE Page-like Transitions</a></li> </ul> </details> <h2> Transition animation for <code>&lt;dialog&gt;</code> and <code>[popover]</code> <a name="transition-animation-for-<code>&lt;dialog&gt;</code>-and-<code>[popover]</code>" href="#transition-animation-for-<code>&lt;dialog&gt;</code>-and-<code>[popover]</code>">#</a> </h2> <p>In 2025, knowing your way around a <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> and a <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/popover"><code>[popover]</code></a> are table stakes. Otherwise, everyone else will be on top of you, and your wack <code>z-index</code> attempts will be defeated with a puny value of <code>1</code>.</p> <p>These are common UI elements, with no JavaScript to download, and accessibility built in. <strong>Use em</strong> and <a href="https://hidde.blog/dialog-modal-popover-differences/">know the differences</a>.</p> <p><baseline-status featureId="dialog"></baseline-status> <baseline-status featureId="popover"></baseline-status></p> <p>These two elements are projected into a layer above all the other UI called the <a href="https://developer.chrome.com/blog/what-is-the-top-layer">top layer</a>. The browser projects the elements from anywhere in the document, to the top when shown.</p> <p><strong>To transition this</strong>, there‚Äôs a few new CSS properties, for the full <em>interruptible</em> CSS transition user experience ‚Äî <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition-behavior"><code>transition-behavior</code></a>, the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@starting-style"><code>@starting-style</code></a> rule, and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/overlay"><code>overlay</code></a>.</p> <p><baseline-status featureId="transition-behavior"></baseline-status> <baseline-status featureId="starting-style"></baseline-status> <baseline-status featureId="overlay"></baseline-status></p> <p>Combining these can feel like an incantation, but that makes it great copy and paste. So here! Use the following snippet to enable cross fade transitions for both <code>&lt;dialog&gt;</code> and <code>popover</code>: <a href="https://codepen.io/argyleink/pen/zYbQBOm">Try it</a></p> <pre><code class="language-css"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-token-comment)">/* enable transitions, allow-discrete, define timing */</span></span> <span class="line"><span style="color:var(--shiki-foreground)">[</span><span style="color:var(--shiki-token-function)">popover</span><span style="color:var(--shiki-foreground)">]</span><span style="color:var(--shiki-token-punctuation)">,</span><span style="color:var(--shiki-token-string-expression)"> dialog</span><span style="color:var(--shiki-token-punctuation)">,</span><span style="color:var(--shiki-token-function)"> ::backdrop</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> transition</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> display 1</span><span style="color:var(--shiki-token-keyword)">s</span><span style="color:var(--shiki-token-constant)"> allow-discrete</span><span style="color:var(--shiki-token-punctuation)">,</span><span style="color:var(--shiki-token-constant)"> overlay 1</span><span style="color:var(--shiki-token-keyword)">s</span><span style="color:var(--shiki-token-constant)"> allow-discrete</span><span style="color:var(--shiki-token-punctuation)">,</span><span style="color:var(--shiki-token-constant)"> opacity 1</span><span style="color:var(--shiki-token-keyword)">s</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> opacity</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> 0</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-comment)">/* ON STAGE */</span></span> <span class="line"><span style="color:var(--shiki-foreground)">:</span><span style="color:var(--shiki-token-string-expression)">popover-open</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-foreground)">:</span><span style="color:var(--shiki-token-string-expression)">popover-open</span><span style="color:var(--shiki-token-function)">::backdrop</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-foreground)">[</span><span style="color:var(--shiki-token-function)">open</span><span style="color:var(--shiki-foreground)">]</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-foreground)">[</span><span style="color:var(--shiki-token-function)">open</span><span style="color:var(--shiki-foreground)">]</span><span style="color:var(--shiki-token-function)">::backdrop</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> opacity</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> 1</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-comment)">/* OFF STAGE */</span></span> <span class="line"><span style="color:var(--shiki-token-comment)">/* starting-style for pre-positioning (enter stage from here) */</span></span> <span class="line"><span style="color:var(--shiki-token-keyword)">@starting-style</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> :</span><span style="color:var(--shiki-token-string-expression)">popover-open</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> :</span><span style="color:var(--shiki-token-string-expression)">popover-open</span><span style="color:var(--shiki-token-function)">::backdrop</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> [</span><span style="color:var(--shiki-token-function)">open</span><span style="color:var(--shiki-foreground)">]</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> [</span><span style="color:var(--shiki-token-function)">open</span><span style="color:var(--shiki-foreground)">]</span><span style="color:var(--shiki-token-function)">::backdrop</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> opacity</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> 0</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span></code></pre> </code></pre> <p>While this code is effective and terse, it&#39;s often not enough customization if you want to present and dismiss dialogs differently than you do popovers. Or make the entry animation different then the exit.</p> <h3> Transition a dialog <a name="transition-a-dialog" href="#transition-a-dialog">#</a> </h3> <p>Here&#39;s a <code>&lt;dialog&gt;</code> element with this barebones snippet applied. They look pretty terrible out of the box, but you can <a href="https://nerdy.dev/have-a-dialog">do amazing things with them</a>.</p> <figure> <p><video src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/css-2025-dialog.mp4 width="1920" height="968" alt="" preload="none" poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/so_0.5,f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/css-2025-dialog.jpg" controls loop muted playsinline allowFullScreen /></p> <figcaption> <p><a href="https://codepen.io/argyleink/pen/OJeWWNZ">Try it</a></p> </figcaption> </figure> <p>To get started, a <code>&lt;dialog&gt;</code> element needs to be in the HTML. A <code>&lt;dialog&gt;</code> should be shown and hidden with buttons, one to show it can be in the page and one to close it should be inside the dialog.</p> <pre><code class="language-html"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-foreground)">&#x3C;</span><span style="color:var(--shiki-token-string-expression)">button</span><span style="color:var(--shiki-token-function)"> onclick</span><span style="color:var(--shiki-foreground)">=</span><span style="color:var(--shiki-token-string-expression)">"demo.showModal()"</span><span style="color:var(--shiki-foreground)">>‚Ä¶&#x3C;/</span><span style="color:var(--shiki-token-string-expression)">button</span><span style="color:var(--shiki-foreground)">></span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-foreground)">&#x3C;</span><span style="color:var(--shiki-token-string-expression)">dialog</span><span style="color:var(--shiki-token-function)"> id</span><span style="color:var(--shiki-foreground)">=</span><span style="color:var(--shiki-token-string-expression)">"demo"</span><span style="color:var(--shiki-foreground)">></span></span> <span class="line"><span style="color:var(--shiki-foreground)"> &#x3C;</span><span style="color:var(--shiki-token-string-expression)">header</span><span style="color:var(--shiki-foreground)">></span></span> <span class="line"><span style="color:var(--shiki-foreground)"> &#x3C;</span><span style="color:var(--shiki-token-string-expression)">button</span><span style="color:var(--shiki-token-function)"> title</span><span style="color:var(--shiki-foreground)">=</span><span style="color:var(--shiki-token-string-expression)">"Close"</span><span style="color:var(--shiki-token-function)"> onclick</span><span style="color:var(--shiki-foreground)">=</span><span style="color:var(--shiki-token-string-expression)">"demo.close()"</span><span style="color:var(--shiki-foreground)">>close&#x3C;/</span><span style="color:var(--shiki-token-string-expression)">button</span><span style="color:var(--shiki-foreground)">></span></span> <span class="line"><span style="color:var(--shiki-foreground)"> &#x3C;/</span><span style="color:var(--shiki-token-string-expression)">header</span><span style="color:var(--shiki-foreground)">></span></span> <span class="line"><span style="color:var(--shiki-foreground)">&#x3C;/</span><span style="color:var(--shiki-token-string-expression)">dialog</span><span style="color:var(--shiki-foreground)">></span></span></code></pre> </code></pre> <q class="tip"> <p>You can enable <strong>light dismiss</strong> on a dialog and skip the close button like <code>&lt;dialog closedby=&quot;any&quot;&gt;</code></p> </q> <p>To animate the dialog transition:</p> <ol> <li>Two parts need animation: the <code>&lt;dialog&gt;</code> itself and its <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::backdrop"><code>::backdrop</code></a>.</li> <li>When a dialog is shown, <code>display: none</code> is changed to <code>display: block</code> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition-behavior"><code>transition-behavior</code></a> enables timing this change with our animation.</li> <li>When a dialog is shown, it is cloned into the <a href="https://developer.mozilla.org/en-US/docs/Glossary/Top_layer">top layer</a>, this also needs to be timed with our animation.</li> <li>The <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/open"><code>[open]</code></a> attribute is used to know when the dialog is open or closed. <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@starting-style"><code>@starting-style</code></a> is used during the first render as starting styles.</li> </ol> <pre><code class="language-css"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-token-string-expression)">dialog</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-token-comment)"> /* Exit Stage To */</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> transform</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-function)"> translateY</span><span style="color:var(--shiki-token-constant)">(-20</span><span style="color:var(--shiki-token-keyword)">px</span><span style="color:var(--shiki-token-constant)">)</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-foreground)"> &#x26;, &#x26;</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)">:backdrop {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> transition:</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> display 1</span><span style="color:var(--shiki-token-keyword)">s</span><span style="color:var(--shiki-token-constant)"> allow-discrete</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> overlay 1</span><span style="color:var(--shiki-token-keyword)">s</span><span style="color:var(--shiki-token-constant)"> allow-discrete</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> opacity 1</span><span style="color:var(--shiki-token-keyword)">s</span><span style="color:var(--shiki-token-constant)"> ease</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> transform 1</span><span style="color:var(--shiki-token-keyword)">s</span><span style="color:var(--shiki-token-constant)"> ease</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-comment)"> /* Exit Stage To */</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> opacity</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> 0</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-comment)"> /* On Stage */</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> &#x26;[</span><span style="color:var(--shiki-token-function)">open</span><span style="color:var(--shiki-foreground)">] {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> opacity</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> 1</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> transform</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-function)"> translateY</span><span style="color:var(--shiki-token-constant)">(0</span><span style="color:var(--shiki-token-keyword)">px</span><span style="color:var(--shiki-token-constant)">)</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-foreground)"> &#x26;</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)">:backdrop {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> opacity: 0.8</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-comment)"> /* Enter Stage From */</span></span> <span class="line"><span style="color:var(--shiki-token-keyword)"> @starting-style</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> &#x26;[</span><span style="color:var(--shiki-token-function)">open</span><span style="color:var(--shiki-foreground)">]</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> &#x26;[</span><span style="color:var(--shiki-token-function)">open</span><span style="color:var(--shiki-foreground)">]</span><span style="color:var(--shiki-token-function)">::backdrop</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> opacity</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> 0</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-foreground)"> &#x26;[</span><span style="color:var(--shiki-token-function)">open</span><span style="color:var(--shiki-foreground)">] {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> transform</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-function)"> translateY</span><span style="color:var(--shiki-token-constant)">(20</span><span style="color:var(--shiki-token-keyword)">px</span><span style="color:var(--shiki-token-constant)">)</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span></code></pre> </code></pre> <p><a href="https://codepen.io/argyleink/pen/OJeWWNZ">Try it</a></p> <p>With this snippet as a starting point, you can find three popular dialog experiences for you to take code or inspiration from <a href="https://nerdy.dev/have-a-dialog">/have-a-dialog</a>.</p> <p>The following video shows the excellent keyboard experience. It also demonstrates the interruptible nature of a CSS transition, so a user can close it anytime they want and always see a smooth interface.</p> <figure> <p><video src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/css-2025-dialogs.mp4 width="1920" height="1082" alt="" preload="none" poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/so_0.5,f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/css-2025-dialogs.jpg" controls loop muted playsinline allowFullScreen /></p> <figcaption> <p><a href="https://nerdy.dev/have-a-dialog">nerdy.dev/have-a-dialog</a></p> </figcaption> </figure> <details class="resources"> <summary>Resources</summary> <ul> <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement">https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement</a></li> <li><a href="https://nerdy.dev/notebook/dialog-starter.html">https://nerdy.dev/notebook/dialog-starter.html</a></li> <li><a href="https://www.youtube.com/watch?v=yORy1IEHDKk">https://www.youtube.com/watch?v=yORy1IEHDKk</a></li> <li><a href="https://web.dev/blog/baseline-entry-animations">https://web.dev/blog/baseline-entry-animations</a></li> <li><a href="https://www.youtube.com/watch?v=f3N-6MzK8Z0&list=PLNYkxOF6rcIDCWoS_GSIwA24gZcwtLCZj&index=1">Pop n&#39; Lock Dialog Mini Web Machine</a></li> </ul> </details> <h3> Transition a popover <a name="transition-a-popover" href="#transition-a-popover">#</a> </h3> <p>Like a <code>&lt;dialog&gt;</code> element, a popover appears over everything else in the top layer. Light dismiss is the default, and keyboard / focus management is all done for you.</p> <figure> <p><video src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/css-2025-popover.mp4 width="1920" height="1082" alt="" preload="none" poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/so_0.5,f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/css-2025-popover.jpg" controls loop muted playsinline allowFullScreen /></p> <figcaption> <p><a href="https://codepen.io/argyleink/pen/mdZXzxW">https://codepen.io/argyleink/pen/mdZXzxW</a></p> </figcaption> </figure> <p><strong>Let&#39;s bulid it.</strong></p> <p>There&#39;s an HTML aspect to implementing the UX:</p> <pre><code class="language-html"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-foreground)">&#x3C;</span><span style="color:var(--shiki-token-string-expression)">button</span><span style="color:var(--shiki-token-function)"> popovertarget</span><span style="color:var(--shiki-foreground)">=</span><span style="color:var(--shiki-token-string-expression)">"pop"</span><span style="color:var(--shiki-foreground)">>?&#x3C;/</span><span style="color:var(--shiki-token-string-expression)">button</span><span style="color:var(--shiki-foreground)">></span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-foreground)">&#x3C;</span><span style="color:var(--shiki-token-string-expression)">p</span><span style="color:var(--shiki-token-function)"> id</span><span style="color:var(--shiki-foreground)">=</span><span style="color:var(--shiki-token-string-expression)">"pop"</span><span style="color:var(--shiki-foreground)"> popover>An overlay with additional information.&#x3C;/</span><span style="color:var(--shiki-token-string-expression)">p</span><span style="color:var(--shiki-foreground)">></span></span></code></pre> </code></pre> <p>Also, like a <code>&lt;dialog&gt;</code> element, to animate the transition of a popover&#39;s display property and insertion into the top layer, you need to combine <code>transition-behavior</code> and <code>@starting-style</code>.</p> <p>Notice with a popover, the open state isn&#39;t an attribute, it&#39;s a css pseudo-class <code>:popover-open</code>.</p> <pre><code class="language-css"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-foreground)">[</span><span style="color:var(--shiki-token-function)">popover</span><span style="color:var(--shiki-foreground)">] {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> &#x26;, &#x26;</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)">:backdrop {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> transition:</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> display 0.5</span><span style="color:var(--shiki-token-keyword)">s</span><span style="color:var(--shiki-token-constant)"> allow-discrete</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> overlay 0.5</span><span style="color:var(--shiki-token-keyword)">s</span><span style="color:var(--shiki-token-constant)"> allow-discrete</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> opacity 0.5</span><span style="color:var(--shiki-token-keyword)">s</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> transform 0.5</span><span style="color:var(--shiki-token-keyword)">s</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-comment)"> /* Exit Stage To */</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> opacity</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> 0</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-comment)"> /* On Stage */</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> &#x26;:</span><span style="color:var(--shiki-token-string-expression)">popover-open</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> opacity</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> 1</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-foreground)"> &#x26;</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)">:backdrop {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> opacity: 0.5</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-comment)"> /* Enter Stage From */</span></span> <span class="line"><span style="color:var(--shiki-token-keyword)"> @starting-style</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> &#x26;:</span><span style="color:var(--shiki-token-string-expression)">popover-open</span><span style="color:var(--shiki-token-punctuation)">,</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> &#x26;:</span><span style="color:var(--shiki-token-string-expression)">popover-open</span><span style="color:var(--shiki-token-function)">::backdrop</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> opacity</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> 0</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-foreground)"> &#x26;:</span><span style="color:var(--shiki-token-string-expression)">popover-open</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> transform</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-function)"> translateY</span><span style="color:var(--shiki-token-constant)">(10</span><span style="color:var(--shiki-token-keyword)">px</span><span style="color:var(--shiki-token-constant)">)</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span></code></pre> </code></pre> <p><a href="https://codepen.io/argyleink/pen/JjzqXee">Try it</a></p> <details class="resources"> <summary>Resources</summary> <ul> <li><a href="https://nerdy.dev/steal-this-popover-starter-kit">https://nerdy.dev/steal-this-popover-starter-kit</a></li> <li><a href="https://nerdy.dev/notebook/dialog-starter.html">https://nerdy.dev/notebook/dialog-starter.html</a></li> <li><a href="https://developer.chrome.com/blog/entry-exit-animations">https://developer.chrome.com/blog/entry-exit-animations</a></li> <li><a href="https://developer.chrome.com/blog/css-ui-ecommerce-popover">https://developer.chrome.com/blog/css-ui-ecommerce-popover</a></li> <li><a href="https://www.youtube.com/watch?v=ASb9vO3ARHo&list=PLNYkxOF6rcIDCWoS_GSIwA24gZcwtLCZj&index=5">Over-Easy Anchor + Popover Mini Web Machine</a></li> </ul> </details> <h2> Transition animation for <code>&lt;details&gt;</code> <a name="transition-animation-for-<code>&lt;details&gt;</code>" href="#transition-animation-for-<code>&lt;details&gt;</code>">#</a> </h2> <p><baseline-status featureId="interpolate-size"></baseline-status> <baseline-status featureId="transition-behavior"></baseline-status> <baseline-status featureId="details-content"></baseline-status></p> <figure> <p><video src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/css-2025-details.mp4 width="1282" height="720" alt="" preload="none" poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/so_0.5,f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/css-2025-details.jpg" controls loop muted playsinline allowFullScreen /></p> <figcaption> <p>Found on the <a href="https://chrome.dev/css-wrapped-2024/">CSS Wrapped 2024</a> website in the desktop layout.</p> </figcaption> </figure> <p>The disclosure element (<code>&lt;details&gt;</code>) has been waiting for CSS primitives to unlock its animation potential for many years.</p> <pre><code class="language-html"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-foreground)">&#x3C;</span><span style="color:var(--shiki-token-string-expression)">details</span><span style="color:var(--shiki-foreground)">></span></span> <span class="line"><span style="color:var(--shiki-foreground)"> &#x3C;</span><span style="color:var(--shiki-token-string-expression)">summary</span><span style="color:var(--shiki-foreground)">>Show disclosed content&#x3C;/</span><span style="color:var(--shiki-token-string-expression)">summary</span><span style="color:var(--shiki-foreground)">></span></span> <span class="line"><span style="color:var(--shiki-foreground)"> &#x3C;</span><span style="color:var(--shiki-token-string-expression)">p</span><span style="color:var(--shiki-foreground)">>‚Ä¶&#x3C;/</span><span style="color:var(--shiki-token-string-expression)">p</span><span style="color:var(--shiki-foreground)">></span></span> <span class="line"><span style="color:var(--shiki-foreground)">&#x3C;/</span><span style="color:var(--shiki-token-string-expression)">details</span><span style="color:var(--shiki-foreground)">></span></span></code></pre> </code></pre> <p>The details element needs to transition to <code>height: auto</code> from <code>height: 0px</code> and a way to target the slotted content it internally uses for the disclosure. The new <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/interpolate-size"><code>interpolate-size</code></a> feature can be used for the height animation and <a href="https://developer.chrome.com/blog/styling-details"><code>::details-content</code></a> for the selector.</p> <pre><code class="language-css"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-token-string-expression)">details</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> inline-size</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> 50</span><span style="color:var(--shiki-token-keyword)">ch</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-foreground)"> @</span><span style="color:var(--shiki-token-constant)">media</span><span style="color:var(--shiki-foreground)"> (</span><span style="color:var(--shiki-token-constant)">prefers-reduced-motion</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> no-preference</span><span style="color:var(--shiki-foreground)">) {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> interpolate-size</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> allow-keywords</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-foreground)"> &#x26;::</span><span style="color:var(--shiki-token-string-expression)">details-content</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> opacity</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> 0</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> block-size</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> 0</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> overflow-y</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> clip</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> transition</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> content-visibility 1</span><span style="color:var(--shiki-token-keyword)">s</span><span style="color:var(--shiki-token-constant)"> allow-discrete</span><span style="color:var(--shiki-token-punctuation)">,</span><span style="color:var(--shiki-token-constant)"> opacity 1</span><span style="color:var(--shiki-token-keyword)">s</span><span style="color:var(--shiki-token-punctuation)">,</span><span style="color:var(--shiki-token-constant)"> block-size 1</span><span style="color:var(--shiki-token-keyword)">s</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-foreground)"> &#x26;[</span><span style="color:var(--shiki-token-function)">open</span><span style="color:var(--shiki-foreground)">]::</span><span style="color:var(--shiki-token-string-expression)">details-content</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> opacity</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> 1</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> block-size</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> auto</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span></code></pre> </code></pre> <p><a href="https://codepen.io/argyleink/pen/QWewVjd">Try it</a></p> <details class="resources"> <summary>Resources</summary> <ul> <li><a href="https://developer.chrome.com/blog/styling-details">https://developer.chrome.com/blog/styling-details</a></li> <li><a href="https://nerdy.dev/open-and-close-transitions-for-the-details-element">https://nerdy.dev/open-and-close-transitions-for-the-details-element</a></li> <li><a href="https://css-tricks.com/almanac/pseudo-selectors/d/details-content/">https://css-tricks.com/almanac/pseudo-selectors/d/details-content/</a></li> </ul> </details> <h3> Bonus attribute <a name="bonus-attribute" href="#bonus-attribute">#</a> </h3> <p><baseline-status featureId="details-name"></baseline-status></p> <p>If you want to connect two or more details elements and have them close each other respectively, you can accomplish this with a shared <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details#name"><code>name</code></a> attribute on each detail element you want to be connected. Very much like a <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio">radio group</a>.</p> <figure> <p><video src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/css-2025-accordion.mp4 width="1280" height="720" alt="" preload="none" poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/so_0.5,f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/css-2025-accordion.jpg" controls loop muted playsinline allowFullScreen /></p> <figcaption> <p><a href="https://developer.chrome.com/blog/styling-details">https://developer.chrome.com/blog/styling-details</a></p> </figcaption> </figure> <pre><code class="language-html"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-foreground)">&#x3C;</span><span style="color:var(--shiki-token-string-expression)">details</span><span style="color:var(--shiki-token-function)"> name</span><span style="color:var(--shiki-foreground)">=</span><span style="color:var(--shiki-token-string-expression)">"linked-disclosure"</span><span style="color:var(--shiki-foreground)">></span></span> <span class="line"><span style="color:var(--shiki-foreground)"> &#x3C;</span><span style="color:var(--shiki-token-string-expression)">summary</span><span style="color:var(--shiki-foreground)">>Show disclosed content&#x3C;/</span><span style="color:var(--shiki-token-string-expression)">summary</span><span style="color:var(--shiki-foreground)">></span></span> <span class="line"><span style="color:var(--shiki-foreground)"> &#x3C;</span><span style="color:var(--shiki-token-string-expression)">p</span><span style="color:var(--shiki-foreground)">>‚Ä¶&#x3C;/</span><span style="color:var(--shiki-token-string-expression)">p</span><span style="color:var(--shiki-foreground)">></span></span> <span class="line"><span style="color:var(--shiki-foreground)">&#x3C;/</span><span style="color:var(--shiki-token-string-expression)">details</span><span style="color:var(--shiki-foreground)">></span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-comment)">&#x3C;!-- name="linked-disclosure" connects these together --></span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-foreground)">&#x3C;</span><span style="color:var(--shiki-token-string-expression)">details</span><span style="color:var(--shiki-token-function)"> name</span><span style="color:var(--shiki-foreground)">=</span><span style="color:var(--shiki-token-string-expression)">"linked-disclosure></span></span> <span class="line"><span style="color:var(--shiki-token-string-expression)"> &#x3C;summary>Show disclosed content&#x3C;/summary></span></span> <span class="line"><span style="color:var(--shiki-token-string-expression)"> &#x3C;p>‚Ä¶&#x3C;/p></span></span> <span class="line"><span style="color:var(--shiki-token-string-expression)">&#x3C;/details></span></span></code></pre> </code></pre> <h2> Animated adaptive gradient text <a name="animated-adaptive-gradient-text" href="#animated-adaptive-gradient-text">#</a> </h2> <p>A bold headline in a design is often complimented with a gradient, helping draw the eye with intrigue and vividness.</p> <p>Since 2015 the web has been able to create gradient text effects, and in the past 10 years, there have been some updates and enhancements: animation, user preferences and interpolation.</p> <ol> <li>Adapting the gradient text effect to <strong>light and dark themes</strong> is easy with the <code>prefers-color-scheme</code> query</li> <li>New animation updates enable gradient effects to <strong>go beyond spinning or moving gradient images around</strong>, but to change colors over time</li> <li>New interpolation updates allow those <strong>mixes to be more vivid, rich, and interesting</strong></li> </ol> <figure> <p><video src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/css-2025-gradient-text.mp4 width="1920" height="1082" alt="" preload="none" poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/so_0.5,f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/css-2025-gradient-text.jpg" controls loop muted playsinline allowFullScreen /></p> <figcaption> <p><a href="https://codepen.io/argyleink/pen/vEBmZNw">https://codepen.io/argyleink/pen/vEBmZNw</a></p> </figcaption> </figure> <pre><code class="language-css"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-token-keyword)">@property</span><span style="color:var(--shiki-foreground)"> --color-1 {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> syntax: "&#x3C;color</span><span style="color:var(--shiki-token-keyword)">></span><span style="color:var(--shiki-foreground)">";</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> inherits: false;</span></span> <span class="line"><span style="color:var(--shiki-token-string-expression)"> initial-value</span><span style="color:var(--shiki-foreground)">: #000;</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-keyword)">@property</span><span style="color:var(--shiki-foreground)"> --color-2 {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> syntax: "&#x3C;color</span><span style="color:var(--shiki-token-keyword)">></span><span style="color:var(--shiki-foreground)">";</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> inherits: false;</span></span> <span class="line"><span style="color:var(--shiki-token-string-expression)"> initial-value</span><span style="color:var(--shiki-foreground)">: #000;</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-keyword)">@keyframes</span><span style="color:var(--shiki-foreground)"> color-change {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> to {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --color-1</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-function)"> var</span><span style="color:var(--shiki-token-constant)">(--_color-1-to)</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --color-2</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-function)"> var</span><span style="color:var(--shiki-token-constant)">(--_color-2-to)</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-function)">.gradient-text</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_space</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-foreground)"> ;</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-comment)"> /* light mode */</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_color-1-from</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> yellow</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_color-1-to</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> orange</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_color-2-from</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> purple</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_color-2-to</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> hotpink</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-comment)"> /* dark mode */</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> @</span><span style="color:var(--shiki-token-constant)">media</span><span style="color:var(--shiki-foreground)"> (</span><span style="color:var(--shiki-token-constant)">prefers-color-scheme</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> dark</span><span style="color:var(--shiki-foreground)">) {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_color-1-from</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> lime</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_color-1-to</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> cyan</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_color-2-from</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> cyan</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_color-2-to</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> deeppink</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-foreground)"> --color-1: var(--_color-1-from);</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --color-2: var(--_color-2-from);</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-foreground)"> animation: </span><span style="color:var(--shiki-token-string-expression)">color-change</span><span style="color:var(--shiki-foreground)"> 2s linear infinite alternate;</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-foreground)"> background: linear-gradient(</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> to right var(--_space),</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> var(--color-1),</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> var(--color-2)</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> );</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-comment)"> /* old browser support */</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> -webkit-background-clip: text;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> -webkit-text-fill-color: transparent;</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-comment)"> /* modern browser version */</span></span> <span class="line"><span style="color:var(--shiki-token-string-expression)"> background-clip</span><span style="color:var(--shiki-foreground)">: text;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> color: transparent;</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-keyword)"> @supports</span><span style="color:var(--shiki-foreground)"> (</span><span style="color:var(--shiki-token-constant)">background</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-function)"> linear-gradient</span><span style="color:var(--shiki-token-constant)">(</span><span style="color:var(--shiki-token-keyword)">in</span><span style="color:var(--shiki-token-constant)"> oklch</span><span style="color:var(--shiki-token-punctuation)">,</span><span style="color:var(--shiki-token-constant)"> #fff</span><span style="color:var(--shiki-token-punctuation)">,</span><span style="color:var(--shiki-token-constant)"> #fff)</span><span style="color:var(--shiki-foreground)">) {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_space: in oklch;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span></code></pre> </code></pre> <p>That&#39;s quite a snippet üòÖ How did it get to that?</p> <p>Most developers making a gradient text effect are starting here:</p> <pre><code class="language-css"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-token-function)">.gradient-text</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> background</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-function)"> linear-gradient</span><span style="color:var(--shiki-token-constant)">(</span><span style="color:var(--shiki-token-keyword)">to</span><span style="color:var(--shiki-token-constant)"> right</span><span style="color:var(--shiki-token-punctuation)">,</span><span style="color:var(--shiki-token-constant)"> hotpink</span><span style="color:var(--shiki-token-punctuation)">,</span><span style="color:var(--shiki-token-constant)"> cyan)</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> -webkit-background-clip</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> text</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> -webkit-text-fill-color</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> transparent</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span></code></pre> </code></pre> <h3> remove the prefixes <a name="remove-the-prefixes" href="#remove-the-prefixes">#</a> </h3> <p>The first update or enhancement is to remove the prefixes. Although, so older browsers continue to support the effect, add the unprefixed values after:</p> <pre><code class="language-css"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-token-function)">.gradient-text</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> background</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-function)"> linear-gradient</span><span style="color:var(--shiki-token-constant)">(</span><span style="color:var(--shiki-token-keyword)">to</span><span style="color:var(--shiki-token-constant)"> right</span><span style="color:var(--shiki-token-punctuation)">,</span><span style="color:var(--shiki-token-constant)"> hotpink</span><span style="color:var(--shiki-token-punctuation)">,</span><span style="color:var(--shiki-token-constant)"> cyan)</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-comment)"> /* old browser support */</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> -webkit-background-clip</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> text</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> -webkit-text-fill-color</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> transparent</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-comment)"> /* modern browser version */</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> background-clip</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> text</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> color</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> transparent</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span></code></pre> </code></pre> <h3> Use updated gradient interpolation spaces <a name="use-updated-gradient-interpolation-spaces" href="#use-updated-gradient-interpolation-spaces">#</a> </h3> <p>Next, improve the quality of the gradient by progressively enhancing the <code>in</code> <a href="https://developer.chrome.com/docs/css-ui/access-colors-spaces#color_interpolation">interpolation syntax</a> with CSS variables and <code>@supports</code>.</p> <p>You could alternatively repeat the gradient definition and include <code>in oklch</code> in it, which would also work great and support older browsers.</p> <pre><code class="language-css"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-token-function)">.gradient-text</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_space</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-foreground)"> ;</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-constant)"> background</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-function)"> linear-gradient</span><span style="color:var(--shiki-token-constant)">(</span><span style="color:var(--shiki-token-keyword)">to</span><span style="color:var(--shiki-token-constant)"> right </span><span style="color:var(--shiki-token-function)">var</span><span style="color:var(--shiki-token-constant)">(--_space)</span><span style="color:var(--shiki-token-punctuation)">,</span><span style="color:var(--shiki-token-constant)"> hotpink</span><span style="color:var(--shiki-token-punctuation)">,</span><span style="color:var(--shiki-token-constant)"> cyan)</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-comment)"> /* old browser support */</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> -webkit-background-clip</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> text</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> -webkit-text-fill-color</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> transparent</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-comment)"> /* modern browser version */</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> background-clip</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> text</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> color</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> transparent</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-foreground)"> @</span><span style="color:var(--shiki-token-constant)">supports</span><span style="color:var(--shiki-foreground)"> (</span><span style="color:var(--shiki-token-constant)">background</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-function)"> linear-gradient</span><span style="color:var(--shiki-token-constant)">(</span><span style="color:var(--shiki-token-keyword)">in</span><span style="color:var(--shiki-token-constant)"> oklch</span><span style="color:var(--shiki-token-punctuation)">,</span><span style="color:var(--shiki-token-constant)"> #fff</span><span style="color:var(--shiki-token-punctuation)">,</span><span style="color:var(--shiki-token-constant)"> #fff)</span><span style="color:var(--shiki-foreground)">) {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_space</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> in oklch</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span></code></pre> </code></pre> <h3> Create typed <code>&lt;color&gt;</code> properties <a name="create-typed-<code>&lt;color&gt;</code>-properties" href="#create-typed-<code>&lt;color&gt;</code>-properties">#</a> </h3> <p>For the gradient color animation use <code>@property</code>, like described in snippet #4. The typed color values can be animated inside of a gradient, like a gradient used with text.</p> <pre><code class="language-css"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-token-keyword)">@property</span><span style="color:var(--shiki-foreground)"> --color-1 {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> syntax: "&#x3C;color</span><span style="color:var(--shiki-token-keyword)">></span><span style="color:var(--shiki-foreground)">";</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> inherits: false;</span></span> <span class="line"><span style="color:var(--shiki-token-string-expression)"> initial-value</span><span style="color:var(--shiki-foreground)">: #000;</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-keyword)">@property</span><span style="color:var(--shiki-foreground)"> --color-2 {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> syntax: "&#x3C;color</span><span style="color:var(--shiki-token-keyword)">></span><span style="color:var(--shiki-foreground)">";</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> inherits: false;</span></span> <span class="line"><span style="color:var(--shiki-token-string-expression)"> initial-value</span><span style="color:var(--shiki-foreground)">: #000;</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span></code></pre> </code></pre> <p>Now <code>--color-1</code> can be animated like <code>transition: ‚Äìcolor-1 .3s ease</code> or used in keyframes. These values that can animate, can be used anywhere color is allowed, like in a gradient text effect.</p> <pre><code class="language-css"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-token-keyword)">@keyframes</span><span style="color:var(--shiki-foreground)"> color-change {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> to {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --color-1</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> lime --color-2: orange</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-function)">.gradient-text</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> animation</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> color-change 2</span><span style="color:var(--shiki-token-keyword)">s</span><span style="color:var(--shiki-token-constant)"> linear infinite alternate</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span></code></pre> </code></pre> <h3> Make a few props, Swap em&#39; in a dark MQ <a name="make-a-few-props,-swap-em&#39;-in-a-dark-mq" href="#make-a-few-props,-swap-em&#39;-in-a-dark-mq">#</a> </h3> <p>To keep things declarative, I&#39;ve also defined color variables to hold the colors for animation.</p> <pre><code class="language-css"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-token-function)">.gradient-text</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_color-1-from</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> yellow</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_color-1-to</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> orange</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_color-2-from</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> purple</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_color-2-to</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> hotpink</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-foreground)"> @</span><span style="color:var(--shiki-token-constant)">media</span><span style="color:var(--shiki-foreground)"> (</span><span style="color:var(--shiki-token-constant)">prefers-color-scheme</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> dark</span><span style="color:var(--shiki-foreground)">) {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_color-1-from</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> lime</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_color-1-to</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> cyan</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_color-2-from</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> cyan</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_color-2-to</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> deeppink</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-comment)"> /* set our typed variables to the "from" values */</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --color-1: var(--_color-1-from);</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --color-2: var(--_color-2-from);</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span></code></pre> </code></pre> <p>Put all those moments and reasons together, and we have arrived at the final snippet:</p> <pre><code class="language-css"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-token-keyword)">@property</span><span style="color:var(--shiki-foreground)"> --color-1 {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> syntax: "&#x3C;color</span><span style="color:var(--shiki-token-keyword)">></span><span style="color:var(--shiki-foreground)">";</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> inherits: false;</span></span> <span class="line"><span style="color:var(--shiki-token-string-expression)"> initial-value</span><span style="color:var(--shiki-foreground)">: #000;</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-keyword)">@property</span><span style="color:var(--shiki-foreground)"> --color-2 {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> syntax: "&#x3C;color</span><span style="color:var(--shiki-token-keyword)">></span><span style="color:var(--shiki-foreground)">";</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> inherits: false;</span></span> <span class="line"><span style="color:var(--shiki-token-string-expression)"> initial-value</span><span style="color:var(--shiki-foreground)">: #000;</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-keyword)">@keyframes</span><span style="color:var(--shiki-foreground)"> color-change {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> to {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --color-1</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-function)"> var</span><span style="color:var(--shiki-token-constant)">(--_color-1-to)</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --color-2</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-function)"> var</span><span style="color:var(--shiki-token-constant)">(--_color-2-to)</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-function)">.gradient-text</span><span style="color:var(--shiki-foreground)"> {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_space</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-foreground)"> ;</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-comment)"> /* light mode */</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_color-1-from</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> yellow</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_color-1-to</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> orange</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_color-2-from</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> purple</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_color-2-to</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> hotpink</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-comment)"> /* dark mode */</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> @</span><span style="color:var(--shiki-token-constant)">media</span><span style="color:var(--shiki-foreground)"> (</span><span style="color:var(--shiki-token-constant)">prefers-color-scheme</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> dark</span><span style="color:var(--shiki-foreground)">) {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_color-1-from</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> lime</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_color-1-to</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> cyan</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_color-2-from</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> cyan</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_color-2-to</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> deeppink</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-foreground)"> --color-1: var(--_color-1-from);</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --color-2: var(--_color-2-from);</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-foreground)"> animation: </span><span style="color:var(--shiki-token-string-expression)">color-change</span><span style="color:var(--shiki-foreground)"> 2s linear infinite alternate;</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-foreground)"> background: linear-gradient(</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> to right var(--_space),</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> var(--color-1),</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> var(--color-2)</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> );</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-comment)"> /* old browser support */</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> -webkit-background-clip: text;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> -webkit-text-fill-color: transparent;</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-comment)"> /* modern browser version */</span></span> <span class="line"><span style="color:var(--shiki-token-string-expression)"> background-clip</span><span style="color:var(--shiki-foreground)">: text;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> color: transparent;</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-keyword)"> @supports</span><span style="color:var(--shiki-foreground)"> (</span><span style="color:var(--shiki-token-constant)">background</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-function)"> linear-gradient</span><span style="color:var(--shiki-token-constant)">(</span><span style="color:var(--shiki-token-keyword)">in</span><span style="color:var(--shiki-token-constant)"> oklch</span><span style="color:var(--shiki-token-punctuation)">,</span><span style="color:var(--shiki-token-constant)"> #fff</span><span style="color:var(--shiki-token-punctuation)">,</span><span style="color:var(--shiki-token-constant)"> #fff)</span><span style="color:var(--shiki-foreground)">) {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_space: in oklch;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span></code></pre> </code></pre> <picture> <source srcset="https://fonts.gstatic.com/s/e/notoemoji/latest/1f913/512.webp" type="image/webp"> <img src="https://fonts.gstatic.com/s/e/notoemoji/latest/1f913/512.gif" alt="ü§ì" width="200" height="200"> </picture> <p>Some years these snippets are short and sweet, but not this year. Watch out for next year&#39;s article, who knows what you&#39;ll need to know!</p> ]]>
</description>
<link>https://nerdy.dev/6-css-snippets-every-front-end-developer-should-know-in-2025?utm_source=rss</link>
<guid isPermaLink="true">https://nerdy.dev/6-css-snippets-every-front-end-developer-should-know-in-2025?utm_source=rss</guid>
<category>
<![CDATA[ blog ]]>
</category>
<category>
<![CDATA[ css ]]>
</category>
<dc:creator>
<![CDATA[ atom@argyleink ]]>
</dc:creator>
<pubDate>Sun, 19 Jan 2025 21:05:00 GMT</pubDate>
<enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/6-css-snippets-2025-thumb.png" length="0" type="image/png"/>
<media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/6-css-snippets-2025-thumb.png"/>
</item>
<item>
<title>
<![CDATA[ Advanced Attr ]]>
</title>
<description>
<![CDATA[ <video style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/argyleink/advanced-attr.gif" alt="code example video showing the old and the new way compared" height="470" width="1418" /> <p>Advanced <code>attr()</code> in <a href="https://developer.chrome.com/blog/chrome-133-beta">Chrome 133</a>. Opening new ways to integrate with CSS from your HTML:</p> <pre><code class="language-html"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-foreground)">&#x3C;</span><span style="color:var(--shiki-token-string-expression)">li</span><span style="color:var(--shiki-token-function)"> scroll-snap</span><span style="color:var(--shiki-foreground)">=</span><span style="color:var(--shiki-token-string-expression)">"start"</span><span style="color:var(--shiki-foreground)">>&#x3C;/</span><span style="color:var(--shiki-token-string-expression)">li</span><span style="color:var(--shiki-foreground)">></span></span> <span class="line"><span style="color:var(--shiki-foreground)">&#x3C;</span><span style="color:var(--shiki-token-string-expression)">li</span><span style="color:var(--shiki-token-function)"> scroll-snap</span><span style="color:var(--shiki-foreground)">=</span><span style="color:var(--shiki-token-string-expression)">"center"</span><span style="color:var(--shiki-foreground)">>&#x3C;/</span><span style="color:var(--shiki-token-string-expression)">li</span><span style="color:var(--shiki-foreground)">></span></span></code></pre> </code></pre> <pre><code class="language-css"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-foreground)">[</span><span style="color:var(--shiki-token-function)">scroll-snap</span><span style="color:var(--shiki-foreground)">] {</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> scroll-snap-align</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-function)"> attr</span><span style="color:var(--shiki-token-constant)">(scroll-snap type(start | center | end)</span><span style="color:var(--shiki-foreground)">);</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span></code></pre> </code></pre> <p><a href="https://codepen.io/argyleink/pen/qEWyZgx">Try it</a> &amp; learn more from <a href="http://bram.us">Bramus</a> @ <a href="https://developer.chrome.com/blog/advanced-attr">Chrome Developers</a></p> ]]>
</description>
<link>https://nerdy.dev/advanced-attr?utm_source=rss</link>
<guid isPermaLink="true">https://nerdy.dev/advanced-attr?utm_source=rss</guid>
<category>
<![CDATA[ note ]]>
</category>
<category>
<![CDATA[ css ]]>
</category>
<dc:creator>
<![CDATA[ devrel@google ]]>
</dc:creator>
<pubDate>Fri, 17 Jan 2025 16:32:07 GMT</pubDate>
<enclosure url="https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/argyleink/advanced-attr.mp4" length="0" type="video/mp4"/>
<media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/argyleink/advanced-attr.gif"/>
</item>
<item>
<title>
<![CDATA[ Scroll State Container Queries ]]>
</title>
<description>
<![CDATA[ <video style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/argyleink/scroll-state-stuck.gif" alt="some title" height="1080" width="1920" /> <p>My <code>@container scroll-state()</code> article is live!<br> <a href="https://developer.chrome.com/blog/css-scroll-state-queries">developer.chrome.com/blog/css-scroll-state-queries</a></p> <p><strong>Stuck state:</strong><br>&nbsp;&nbsp;Triggered when an element is stuck.<br><strong>Snapped state:</strong><br>&nbsp;&nbsp;Triggered when an element is snapped.<br><strong>Scrollable state:</strong><br>&nbsp;&nbsp;Triggered when an element is overflowing.</p> ]]>
</description>
<link>https://nerdy.dev/scroll-state-container-queries?utm_source=rss</link>
<guid isPermaLink="true">https://nerdy.dev/scroll-state-container-queries?utm_source=rss</guid>
<category>
<![CDATA[ note ]]>
</category>
<category>
<![CDATA[ css ]]>
</category>
<dc:creator>
<![CDATA[ devrel@google ]]>
</dc:creator>
<pubDate>Wed, 15 Jan 2025 19:09:18 GMT</pubDate>
<enclosure url="https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/argyleink/scroll-state-stuck.mp4" length="0" type="video/mp4"/>
<media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/argyleink/scroll-state-stuck.gif"/>
</item>
<item>
<title>
<![CDATA[ Pure CSS Scroll Spy Table Of Contents ]]>
</title>
<description>
<![CDATA[ <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/powell-toc.jpg" alt="some title" height="720" width="1280" /> <p><a href="https://www.youtube.com/watch?v=kOwLG3Nc5eM">Pure CSS Scroll Spy Table of Contents</a></p> <p><a href="https://www.youtube.com/@KevinPowell">Kevin Pow()ell</a> and I go over the <a href="https://chrome.dev/css-wrapped-2024">CSS Wrapped 2024</a> site and break down the <code>&lt;details&gt;</code> scroll spy component to uncover the CSS scroll driven animation powering it.</p> ]]>
</description>
<link>https://nerdy.dev/pure-css-scroll-spy-table-of-contents?utm_source=rss</link>
<guid isPermaLink="true">https://nerdy.dev/pure-css-scroll-spy-table-of-contents?utm_source=rss</guid>
<category>
<![CDATA[ note ]]>
</category>
<category>
<![CDATA[ css ]]>
</category>
<category>
<![CDATA[ shows ]]>
</category>
<dc:creator>
<![CDATA[ devrel@google ]]>
</dc:creator>
<pubDate>Wed, 15 Jan 2025 15:33:52 GMT</pubDate>
<enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/powell-toc.jpg" length="0" type="image/jpeg"/>
<media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/powell-toc.jpg"/>
</item>
<item>
<title>
<![CDATA[ Open Props UI ]]>
</title>
<description>
<![CDATA[ <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/opui.png" alt="Open Props UI, the UI of the future (or now, with feature flags). Components you can copy or paste into your projects." height="592" width="1286" /> <p>Presenting <a href="https://open-props-ui.netlify.app">Open Props UI</a>! Imagine <a href="https://ui.shadcn.com/">ShadCN</a> and <a href="https://open-props.style">Open Props</a> had a baby. It&#39;s just <del>turned</del> hit <a href="https://github.com/felix-bohlin/ui/releases/tag/1.0"><code>v1</code></a> with 25+ components ready to <strong>copy and paste</strong>.</p> <p><q>Open Props UI, the UI of the future (or now, with feature flags). Components you can copy or paste into your projects.<cite><a href="https://open-props-ui.netlify.app/">Open Props UI Homepage</a></cite></q></p> <picture> <source srcset="https://fonts.gstatic.com/s/e/notoemoji/latest/2728/512.webp" type="image/webp"> <img src="https://fonts.gstatic.com/s/e/notoemoji/latest/2728/512.gif" alt="‚ú®" width="50" height="50"> </picture> <p><a href="/notebook/open-props-ui.html">Try the Notebook!</a></p> <h2> the strategy <a name="the-strategy" href="#the-strategy">#</a> </h2> <p>A getting started overview also helps paint the delivery strategy of the work:</p> <ol> <li>Have <a href="/notebook/open-props-springs.html">Open Props</a> and <a href="https://open-props-ui.netlify.app/guide/getting-started.html">Open Props UI</a> base styles</li> <li>Shop <a href="https://open-props-ui.netlify.app/components/actions/button">the components</a></li> <li>Snag HTML and CSS into your project</li> </ol> <p>The components are shown on the page like interactive docs, sharing the capabilities, markup and styles to reproduce them. Open Props are the way all of these components look like their from the same family.</p> <p>Pretty sweet giveaway from <a href="https://github.com/felix-bohlin">Felix Bohlin</a> ‚ù§Ô∏è. Thanks for all this work!</p> <p>I think my favorite components page is <a href="https://open-props-ui.netlify.app/components/data-display/list.html">The List</a> ü§òüèª</p> <p><img loading="lazy" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/f_auto,c_limit,q_auto,w_auto/w_800/argyleink/opui-list.png" alt="" title="Title " decoding="async" width="956" height="1534" /></p> <h2> the tactics <a name="the-tactics" href="#the-tactics">#</a> </h2> <p>In practice, after setup, this workflow is sweet.</p> <p><strong>Grab a button</strong>; here&#39;s one from the docs:</p> <pre><code class="language-html"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-foreground)">&#x3C;</span><span style="color:var(--shiki-token-string-expression)">button</span><span style="color:var(--shiki-token-function)"> class</span><span style="color:var(--shiki-foreground)">=</span><span style="color:var(--shiki-token-string-expression)">"button"</span><span style="color:var(--shiki-foreground)">>Default&#x3C;/</span><span style="color:var(--shiki-token-string-expression)">button</span><span style="color:var(--shiki-foreground)">></span></span></code></pre> </code></pre> <p><strong>Grab the styles</strong>; check the <a href="https://open-props-ui.netlify.app/components/actions/button.html#installation">installation section</a>:</p> <pre><code class="language-css"><pre class="shiki css-variables" style="background-color:var(--shiki-background);color:var(--shiki-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--shiki-token-keyword)">@layer</span><span style="color:var(--shiki-foreground)"> components.base {</span></span> <span class="line"><span style="color:var(--shiki-token-function)"> :where</span><span style="color:var(--shiki-foreground)">(</span><span style="color:var(--shiki-token-function)">.button</span><span style="color:var(--shiki-foreground)">) {</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_bg-color</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> transparent</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_border-color</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> transparent</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_border-radius</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-function)"> var</span><span style="color:var(--shiki-token-constant)">(--button-border-radius)</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_font-size</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> initial</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_min-height</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> 2.375</span><span style="color:var(--shiki-token-keyword)">rem</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> --_text-color</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-function)"> var</span><span style="color:var(--shiki-token-constant)">(--primary)</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"></span> <span class="line"><span style="color:var(--shiki-token-constant)"> -webkit-tap-highlight-color</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> transparent</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> -webkit-touch-callout</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> none</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-token-constant)"> align-items</span><span style="color:var(--shiki-token-keyword)">:</span><span style="color:var(--shiki-token-constant)"> center</span><span style="color:var(--shiki-foreground)">;</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> ‚Ä¶</span></span> <span class="line"><span style="color:var(--shiki-foreground)"> }</span></span> <span class="line"><span style="color:var(--shiki-foreground)">}</span></span></code></pre> </code></pre> <p><strong>It slots into your workflow, you don&#39;t need to slot into its.</strong></p> <p><img loading="lazy" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/f_auto,c_limit,q_auto,w_auto/w_800/argyleink/opui-btngroup.png" alt="" title="Title " decoding="async" width="1418" height="1066" /></p> <p>The readme in the repo has a great closing summary of the intent of this library:</p> <p><q>Everything is made with ease-of-use and scalability in mind. Last but not least - you copy and paste the components into your repo. It&#39;s the best way to have a complete understanding and ownership over your stuff.</q></p> <h2> the goal <a name="the-goal" href="#the-goal">#</a> </h2> <p><a href="https://github.com/felix-bohlin/ui">From the repo</a>: The point is to let the spec and the components mature alongside each other and in time the library will be ready for production.</p> <ul> <li>Have sensible defaults without sacrificing flexibility and control</li> <li>Use modern HTML &amp; CSS features</li> <li>Follow accessibility guidelines</li> <li>Serve as an inspiration</li> <li>Be scalable</li> </ul> <picture> <source srcset="https://fonts.gstatic.com/s/e/notoemoji/latest/1f63b/512.webp" type="image/webp"> <img src="https://fonts.gstatic.com/s/e/notoemoji/latest/1f63b/512.gif" alt="üòª" width="100" height="100"> </picture> ]]>
</description>
<link>https://nerdy.dev/open-props-ui?utm_source=rss</link>
<guid isPermaLink="true">https://nerdy.dev/open-props-ui?utm_source=rss</guid>
<category>
<![CDATA[ blog ]]>
</category>
<category>
<![CDATA[ css ]]>
</category>
<dc:creator>
<![CDATA[ atom@argyleink ]]>
</dc:creator>
<pubDate>Wed, 15 Jan 2025 05:26:41 GMT</pubDate>
<enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/opui.png" length="0" type="image/png"/>
<media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/opui.png"/>
</item>
<item>
<title>
<![CDATA[ Text Box Trim ]]>
</title>
<description>
<![CDATA[ <video style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/argyleink/text-box-trimmed.gif" alt="some title" height="534" width="950" /> <p>My <code>text-box</code> article is live!<br> <a href="https://developer.chrome.com/blog/css-text-box-trim">https://developer.chrome.com/blog/css-text-box-trim</a></p> <p>Did you miss <a href="/text-box-ftw">my <code>text-box</code> prediction</a>?</p> <p><strong>Don&#39;t miss</strong> <a href="/notebook/text-box.html">this interactive notebook</a>, helpful for <em>feeling</em> out the effects and edge cases.</p> ]]>
</description>
<link>https://nerdy.dev/text-box-trim?utm_source=rss</link>
<guid isPermaLink="true">https://nerdy.dev/text-box-trim?utm_source=rss</guid>
<category>
<![CDATA[ note ]]>
</category>
<category>
<![CDATA[ css ]]>
</category>
<dc:creator>
<![CDATA[ devrel@google ]]>
</dc:creator>
<pubDate>Tue, 14 Jan 2025 20:36:48 GMT</pubDate>
<enclosure url="https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/argyleink/text-box-trimmed.mp4" length="0" type="video/mp4"/>
<media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/argyleink/text-box-trimmed.gif"/>
</item>
<item>
<title>
<![CDATA[ Introducing The Nerdy Notebook ]]>
</title>
<description>
<![CDATA[ <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/nerdy-notebook.png" alt="Text emphasized alt text example" height="744" width="1966" /> <p>February 2018; I <a href="https://observablehq.com/@argyleink/an-es6-async-await-functional-programming-party">wrote my first Observable notebook</a>. I really liked how I could seamlessly provide interactivity and proof for the content I was trying to teach.</p> <p><strong>June 2024</strong>; First working git commit is pushed for a self hosted <a href="https://observablehq.com/">Observable</a> variant called <a href="https://github.com/observablehq/framework">Framework</a>. ü§òüèªüíÄ I pounced, been hackin away at it, and am stoked to release it!</p> <picture> <source srcset="https://fonts.gstatic.com/s/e/notoemoji/latest/1f48c/512.webp" type="image/webp"> <img src="https://fonts.gstatic.com/s/e/notoemoji/latest/1f48c/512.gif" alt="üíå" width="100" height="100"> </picture> <p><strong>The Nerdy Notebook</strong> <br>‚Ü™ <a href="https://nerdy.dev/notebook">https://nerdy.dev/notebook</a></p> <h2> what is it? <a name="what-is-it?" href="#what-is-it?">#</a> </h2> <p>A place I hope to gradually centralized demo&#39;s, snippets, and other stuff I want to share / give you to steal. Watch out for <a href="/notebook/open-props-springs.html">links like this</a> or bigger callouts like this:</p> <q class="notebook"> <a href="/notebook/hover-not-hover.html">Tinker in this notebook!</a> </q> <p>They&#39;ll take you to these new notebook experiences where you can tweak and interact with the things I&#39;m talking about.</p> <p>You can also find a link in the nav at the top-right-o-this-site. Fast pass to <strong>The Nerdy Notebook</strong>.</p> <p>Writing these notebooks is so fun! The Observable team has really made it slick and seamless. Excited to make more of these over 2025.</p> <picture> <source srcset="https://fonts.gstatic.com/s/e/notoemoji/latest/1f929/512.webp" type="image/webp"> <img src="https://fonts.gstatic.com/s/e/notoemoji/latest/1f929/512.gif" alt="ü§©" width="100" height="100"> </picture> ]]>
</description>
<link>https://nerdy.dev/nerdy-notebook?utm_source=rss</link>
<guid isPermaLink="true">https://nerdy.dev/nerdy-notebook?utm_source=rss</guid>
<category>
<![CDATA[ blog ]]>
</category>
<category>
<![CDATA[ css ]]>
</category>
<dc:creator>
<![CDATA[ Web Master@admin ]]>
</dc:creator>
<pubDate>Sun, 12 Jan 2025 19:55:07 GMT</pubDate>
<enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/nerdy-notebook.png" length="0" type="image/png"/>
<media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/nerdy-notebook.png"/>
</item>
</channel>
</rss>